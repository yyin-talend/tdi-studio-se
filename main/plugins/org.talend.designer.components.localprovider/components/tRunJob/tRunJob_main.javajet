<%@ jet 
imports="
   org.talend.core.model.metadata.types.JavaType
  org.talend.core.model.process.EConnectionType
  org.talend.core.model.process.IConnection
  org.talend.core.model.metadata.IMetadataColumn
  org.talend.core.model.metadata.IMetadataTable
  org.talend.core.model.metadata.types.JavaTypesManager
  org.talend.core.model.process.INode 
  org.talend.core.model.process.ElementParameterParser
  org.talend.designer.codegen.config.CodeGeneratorArgument
  org.talend.designer.runprocess.ProcessorUtilities
  org.talend.designer.runprocess.ProcessorException
  org.talend.core.model.process.IProcess
  org.talend.core.model.process.IContextParameter
  org.talend.core.model.process.IConnectionCategory
  org.talend.core.model.process.BlockCode
  java.util.Map
  java.util.List
  java.util.Set
  java.util.HashSet
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
List<IMetadataColumn> columns = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata != null) {
        columns = metadata.getListColumns();
    }
}
List< ? extends IConnection> outConns = node.getOutgoingSortedConnections();
  
//if tRunJob is the first node, it can get the return values of the child job.
//if tRunJob is middle node of the FLOW link, it will be data_auto_propagate=true 
List< ? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
boolean useIndependentProcess = "true".equals(ElementParameterParser.getValue(node, "__USE_INDEPENDENT_PROCESS__"));
boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node, "__DIE_ON_CHILD_ERROR__"));  
boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();  
boolean transmitWholeContext = ("true").equals(ElementParameterParser.getValue(node, "__TRANSMIT_WHOLE_CONTEXT__"));  
boolean printParameter = ("true").equals(ElementParameterParser.getValue(node, "__PRINT_PARAMETER__")); 

boolean originalContext = ("true").equals(ElementParameterParser.getValue(node, "__TRANSMIT_ORIGINAL_CONTEXT__")); 

IProcess currentProcess = node.getProcess();
List<Map<String, String>> contextParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONTEXTPARAMS__");
String process = ElementParameterParser.getValue(node,"__PROCESS_TYPE_PROCESS__");
String context = ElementParameterParser.getValue(node,"__PROCESS_TYPE_CONTEXT__");
String version = ElementParameterParser.getValue(node,"__PROCESS_TYPE_VERSION__");
String[] codeOptions = new String[] {"\"--father_pid=\"+pid", "\"--root_pid=\"+rootPid", "\"--father_node="+ cid + "\""};
String[] commandLineWindows = new String[] {"<command>"};
String[] commandLineUnix = new String[] {"<command>"};
String[] commandLine = new String[] {"<command>"};
String childJob = ElementParameterParser.getValue(node,"__PROCESS__");

boolean useDynamicContext = "true".equals(ElementParameterParser.getValue(node, "__USE_DYNAMIC_CONTEXT__"));
String dynamicContext = ElementParameterParser.getValue(node,"__DYNAMIC_CONTEXT__");

boolean isPropagateChildResult = ("true").equals(ElementParameterParser.getValue(node, "__PROPAGATE_CHILD_RESULT__"));

boolean useDynamicJob = ("true").equals(ElementParameterParser.getValue(node, "__USE_DYNAMIC_JOB__"));
String dynamicJobName = ElementParameterParser.getValue(node,"__CONTEXT_JOB__");
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
boolean propagateData = false;
Set<String> inputCols = new HashSet<String>();
String inputConnName = null;
%>
	java.util.List<String> paraList_<%=cid %> = new java.util.ArrayList<String>();
	<%
	//For TDI-28558

	List<IMetadataColumn> inputMetadataColumn = new java.util.ArrayList<IMetadataColumn>();
	List<IMetadataColumn> outputMetadataColumn = new java.util.ArrayList<IMetadataColumn>();
	if (node.getIncomingConnections()!=null) {
		for (IConnection incomingConn : node.getIncomingConnections()) {
			if (incomingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				inputConnName = incomingConn.getName();
				IMetadataTable inputMetadataTable = incomingConn.getMetadataTable();
				for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
					inputMetadataColumn.add(inputCol);
					inputCols.add(inputCol.getLabel());
				}
				break;
			}
		}
	}
	if(node.getOutgoingConnections()!=null) {
		for (IConnection outputConn : node.getOutgoingConnections()) {
			if (outputConn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
				IMetadataTable outputMetadataTable = outputConn.getMetadataTable();
				for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) {
					outputMetadataColumn.add(outputCol);
				}
			}
		}
	}
	if(inputMetadataColumn!=null && outputMetadataColumn!=null){
		if(inputMetadataColumn.size() == outputMetadataColumn.size()){
			int size = inputMetadataColumn.size();
			for(int i = 0;i< size; i++){
				if(!inputMetadataColumn.get(i).getLabel().equals(outputMetadataColumn.get(i).getLabel()) ||
				   !inputMetadataColumn.get(i).getTalendType().equals(outputMetadataColumn.get(i).getTalendType())){
					propagateData = false;
					break;
				}else{
					propagateData = true;
				}
			}
		}
	}
	if(useDynamicJob || useIndependentProcess || !isPropagateChildResult){
		if (propagateData) {
			for (IConnection conn : node.getOutgoingConnections()) {
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
					IMetadataTable outputMetadataTable = conn.getMetadataTable();
					if (outputMetadataTable!=null) {
						for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) { 
							if (inputCols.contains(outputCol.getLabel())) {
							%>
								<%=conn.getName() %>.<%=outputCol.getLabel() %> = <%=inputConnName %>.<%=outputCol.getLabel() %>;
							<%
							}
						}
					}
					break;
				}
			}
		}
	}
	
	if(useDynamicJob){
		useIndependentProcess = true;
		%>
		if(childJob_commandLine_Mapper_<%=cid%>.get(<%=dynamicJobName%>)==null){
			throw new RuntimeException("The child job named "+<%=dynamicJobName%>+" is not in the job list.");
		}
		paraList_<%=cid %>.addAll(childJob_commandLine_Mapper_<%=cid%>.get(<%=dynamicJobName%>));
	<%
	}else{
		boolean use_custom_jvm_setting = "true".equals(ElementParameterParser.getValue(node, "__USE_CUSTOM_JVM_SETTING__"));
		try {
			if(useIndependentProcess){
		    	commandLineWindows = ProcessorUtilities.getCommandLine("win32", false, true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, use_custom_jvm_setting, codeOptions);
		    	// remove the 2 fist lines
		    	if (commandLineWindows.length > 0 && ProcessorUtilities.isExportConfig()){
		    		int tmpSize = commandLineWindows.length - 2;
		    		String[] tmp = new String[tmpSize];
		    		System.arraycopy(commandLineWindows, 2, tmp, 0, tmpSize);
		    		commandLineWindows = tmp;
	    		}
		    	commandLineUnix = ProcessorUtilities.getCommandLine("linux", false, true, process, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, use_custom_jvm_setting, codeOptions);
	    		// remove the 2 first lines
				if (commandLineUnix.length > 0 && ProcessorUtilities.isExportConfig()){
					int tmpSize = commandLineUnix.length - 2;
					String[] tmp = new String[tmpSize];
					System.arraycopy(commandLineUnix, 2, tmp, 0, tmpSize);
					commandLineUnix = tmp;
				}
			}else{
		    	commandLine = ProcessorUtilities.getMainCommand(process,version, context,org.talend.designer.runprocess.IProcessor.NO_STATISTICS,org.talend.designer.runprocess.IProcessor.NO_TRACES, codeOptions);  
			}
		} catch (ProcessorException e) {
		}


		if (!useIndependentProcess) {
			for (int i = 0; i < commandLine.length; i++) {
				if (i == 0){
					childJob = commandLine[0];
				} else if (i > 0){
					if (commandLine[i].indexOf("\"") >= 0){
						if(useDynamicContext && commandLine[i].startsWith("\"--context=")) {
	      			%>
	        				paraList_<%=cid %>.add("--context="+<%=dynamicContext%>);
	      			<%
	      				} else {
	      			%>
	        				paraList_<%=cid %>.add(<%=commandLine[i] %>);
	      			<%
	      				}
	      			}else{
	      				if(useDynamicContext && commandLine[i].startsWith("--context=")) {
	      			%>
	        				paraList_<%=cid %>.add("--context="+<%=dynamicContext%>);
	      			<%
	      				} else {
	      			%>
	        				paraList_<%=cid %>.add("<%=commandLine[i] %>");
	      			<%
	      				}
	      			}
	    		}
	  		}
		} else {
	  	%>
			
			String osName_<%=cid %> = System.getProperty("os.name");
			if (osName_<%=cid %> != null && osName_<%=cid %>.toLowerCase(java.util.Locale.US).startsWith("win")){
				<%
				boolean isCP = false;
				for (int i = 0; i < commandLineWindows.length; i++) {
					if (i == 0){
					%>
						paraList_<%=cid %>.add("<%=commandLineWindows[i]%>");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_<%=cid %>.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_<%=cid %> = System.getProperty("log4j.configuration");
							if (log4j1_config_<%=cid %> != null){
								paraList_<%=cid %>.add("-Dlog4j.configuration=" + log4j1_config_<%=cid %>);
							}
							String log4j2_config_<%=cid %> = System.getProperty("log4j.configurationFile");
							if (log4j2_config_<%=cid %> != null){
								paraList_<%=cid %>.add("-Dlog4j.configurationFile=" + log4j2_config_<%=cid %>);
							}
							if (log4j1_config_<%=cid %> != null || log4j2_config_<%=cid %> != null) {
								paraList_<%=cid %>.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_<%=cid %>.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_<%=cid %>.add("-D" + key + "=" + System.getProperty(key)));
					<%
					} else if (i > 0){
		      			if (commandLineWindows[i].indexOf("\"") >= 0){
							if(commandLineWindows[i].indexOf(".jar")>=0){
		      				%>
		      					String classpath_<%=cid %>_<%=i %> = <%=commandLineWindows[i] %>;
		      					<%if(isCP && (commandLineWindows[i].endsWith(":\"") || commandLineWindows[i].endsWith(";\""))) {%>
		      					if(audit_jar_path_<%=cid %>!=null && !audit_jar_path_<%=cid %>.isEmpty()) {
		      						classpath_<%=cid %>_<%=i %> += audit_jar_path_<%=cid %>;
		      					}
		      					<%}%>
								jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, dealChildJobLibrary_<%=cid %>.replaceJarPathsFromCrcMap(classpath_<%=cid %>_<%=i %>), <%=isCP%>);
		      				<%
							}else{
		      				%>
		      					jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, <%=commandLineWindows[i] %>);
		      				<%
		          			}
		          			
		          			if("\"-cp\"".equals(commandLineWindows[i]) || "\"-classpath\"".equals(commandLineWindows[i])) {
		          				isCP = true;
		          			} else {
		          				isCP = false;
		          			}
		      			}else{
		          			if(commandLineWindows[i].indexOf(".jar")>=0){
              				%>
              					String classpath_<%=cid %>_<%=i %> = "<%=commandLineWindows[i] %>";
              					<%if(isCP && (commandLineWindows[i].endsWith(":") || commandLineWindows[i].endsWith(";"))) {%>
              					if(audit_jar_path_<%=cid %>!=null && !audit_jar_path_<%=cid %>.isEmpty()) {
		      						classpath_<%=cid %>_<%=i %> += audit_jar_path_<%=cid %>;
		      					}
		      					<%}%>
	        					jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, dealChildJobLibrary_<%=cid %>.replaceJarPathsFromCrcMap(classpath_<%=cid %>_<%=i %>), <%=isCP%>);
		      				<%
		          			}else{
              				%>
		      					jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, "<%=commandLineWindows[i] %>");
		      				<%
		          			}
		          			
		          			if("-cp".equals(commandLineWindows[i]) || "-classpath".equals(commandLineWindows[i])) {
		          				isCP = true;
		          			} else {
		          				isCP = false;
		          			}
		      			}	
		    		}
		  		}
		  		%>
			} else {
	      		<%
				for (int i = 0; i < commandLineUnix.length; i++) {
					if (i == 0){
					%>
						paraList_<%=cid %>.add("<%=commandLineUnix[i]%>");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_<%=cid %>.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_<%=cid %> = System.getProperty("log4j.configuration");
							if (log4j1_config_<%=cid %> != null){
								paraList_<%=cid %>.add("-Dlog4j.configuration=" + log4j1_config_<%=cid %>);
							}
							String log4j2_config_<%=cid %> = System.getProperty("log4j.configurationFile");
							if (log4j2_config_<%=cid %> != null){
								paraList_<%=cid %>.add("-Dlog4j.configurationFile=" + log4j2_config_<%=cid %>);
							}
							if (log4j1_config_<%=cid %> != null || log4j2_config_<%=cid %> != null) {
								paraList_<%=cid %>.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_<%=cid %>.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_<%=cid %>.add("-D" + key + "=" + System.getProperty(key)));
					<%
					} else if (i > 0){
						String param;
						if (commandLineUnix[i].indexOf("\"") >= 0){
							param = commandLineUnix[i];
						} else {
							param = "\""+commandLineUnix[i]+"\"";
						}
						if (param.contains("$ROOT_PATH")) {
							if(param.indexOf(".jar") >= 0){
		      				%>
		      					String classpath_<%=cid %>_<%=i %> = <%=param %>;
		      					<%if(isCP && (param.endsWith(":\"") || param.endsWith(";\""))) {%>
		      					if(audit_jar_path_<%=cid %>!=null && !audit_jar_path_<%=cid %>.isEmpty()) {
		      						classpath_<%=cid %>_<%=i %> += audit_jar_path_<%=cid %>;
		      					}
		      					<%}%>
								jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, dealChildJobLibrary_<%=cid %>.replaceJarPathsFromCrcMap(classpath_<%=cid %>_<%=i %>).replace("$ROOT_PATH",System.getProperty("user.dir")), <%=isCP%>);
		      				<%}else{%>
		        				jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, <%=param %>.replace("$ROOT_PATH",System.getProperty("user.dir")));
		     	 			<%
		      				}
		      			}else{
							if(param.indexOf(".jar") >= 0){
		      				%>
		      					String classpath_<%=cid %>_<%=i %> = <%=param %>;
		      					<%if(isCP && (param.endsWith(":\"") || param.endsWith(";\""))) {%>
		      					if(audit_jar_path_<%=cid %>!=null && !audit_jar_path_<%=cid %>.isEmpty()) {
		      						classpath_<%=cid %>_<%=i %> += audit_jar_path_<%=cid %>;
		      					}
		      					<%}%>
	      						jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, dealChildJobLibrary_<%=cid %>.replaceJarPathsFromCrcMap(classpath_<%=cid %>_<%=i %>).replace("$ROOT_PATH",System.getProperty("user.dir")), <%=isCP%>);
		      				<%}else{%>
								jvm_argument_helper_<%=cid%>.addArgumentsTo(paraList_<%=cid %>, <%=param %>);
		      				<%
		      				}
		      			}
		      			
		      			if("\"-cp\"".equals(param) || "\"-classpath\"".equals(param)) {
		      				isCP = true;
		      			} else {
		      				isCP = false;
		      			}
	    			}
		  		}
		  		%>
			}

			<%
			if(use_custom_jvm_setting) {
			%>
			jvm_argument_helper_<%=cid%>.reset();
			<%}%>
			
	  	<%
		}
		if(isLog4jEnabled){//For TDI-27659
		%>
			if(!"".equals(log4jLevel)){
				paraList_<%=cid %>.add("--log4jLevel="+log4jLevel);
			}
		<%
		}
		%>
		if(enableLogStash){
			paraList_<%=cid %>.add("--audit.enabled="+enableLogStash);
		}
		<%
	}
	%>
	//for feature:10589
	<%if(useIndependentProcess){%>
		paraList_<%=cid %>.add("--stat_port=" + null);
	<%}else{%>
		paraList_<%=cid %>.add("--stat_port=" + portStats);
	<%}%>

	if(resuming_logs_dir_path != null){
		paraList_<%=cid %>.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_<%=cid %> = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_<%=cid %> = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("<%=cid %>".equals(tRunJobName_<%=cid %>) && childResumePath_<%=cid %> != null){
		paraList_<%=cid %>.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_<%=cid %>.add("--parent_part_launcher=JOB:" + jobName + "/NODE:<%=cid %>");
	
	java.util.Map<String, Object> parentContextMap_<%=cid %> = new java.util.HashMap<String, Object>();

	<%
	Set<IConnection> iterateConnSet =  new HashSet<IConnection>();
	List<? extends IConnection> iterateConns = node.getIncomingConnections(EConnectionType.ITERATE);
	if(iterateConns != null)  { 
		iterateConnSet.addAll(iterateConns);
	}
	boolean parallelIterate = false;
	for (IConnection iterateConn : iterateConnSet) {
		parallelIterate = "true".equals(ElementParameterParser.getValue(iterateConn, "__ENABLE_PARALLEL__"));
	}
	if(printParameter) {
	%> 
	java.util.List<String> paraListForLog_<%=cid %> = new java.util.ArrayList<String>();
	paraListForLog_<%=cid %>.addAll(paraList_<%=cid %>);
	List<String> parametersToEncrypt_<%=cid %> = new java.util.ArrayList<String>();
	<%
		List<IContextParameter> params = currentProcess.getContextManager().getDefaultContext().getContextParameterList();
		for (IContextParameter ctxParam :params){
			if("id_Password".equals(ctxParam.getType())) {
			%>
			parametersToEncrypt_<%=cid %> .add("<%=ctxParam.getName() %>");
			<%
			}
		}
	}
	if(transmitWholeContext){//111111
	%>
		<% 
		//bug21906
		String localContext = "context";
		if(parallelIterate) {
			localContext = "localContext";
		}
		%>
		<%=localContext%>.synchronizeContext();
<%
		List<IContextParameter> params = currentProcess.getContextManager().getDefaultContext().getContextParameterList();
        /*Create local class to avoid 64kB method problem when huge amount of context variables declared*/
        if (!params.isEmpty()) {
            final int defaultInnerMethodLenght = 500;
            int lastMethodNumber = 0;
%>
            class ContextProcessor_<%=cid %> {
                    private void transmitContext_0() {
<%
                for (int i = 1; i <= params.size(); i++) {
                    IContextParameter ctxParam = params.get(i-1);
                    String ctxParamName = ctxParam.getName();
                    String ctxParameterType = ctxParam.getType();
                    if (i % defaultInnerMethodLenght == 0) {
                    /* close previous method and declare new */
                        lastMethodNumber++;
%>
                        }

                        private void transmitContext_<%=lastMethodNumber%>() {
<%
                    } //endIf
%>
                    parentContextMap_<%=cid %>.put("<%=ctxParamName %>", <%=localContext%>.<%=ctxParamName %>);
                    paraList_<%=cid %>.add("--context_type " + "<%=ctxParamName%>" + "=" + "<%=ctxParam.getType()%>");
<%
                } //endFor
%>
                        <%/*close last method*/%>
                        }
                    public void transmitAllContext() {
<%
                    for (int i = 0; i <=lastMethodNumber; i++) {
%>
                        transmitContext_<%=i %>();
<%
                    }
%>
                    }
            }
            new ContextProcessor_<%=cid %>().transmitAllContext();
<%
        }
%>
		java.util.Enumeration<?> propertyNames_<%=cid %> = <%=localContext%>.propertyNames();
		while (propertyNames_<%=cid %>.hasMoreElements()) {
			String key_<%=cid %> = (String) propertyNames_<%=cid %>.nextElement();
			Object value_<%=cid %> = (Object) <%=localContext%>.get(key_<%=cid %>);
			if(value_<%=cid %>!=null) {  
				paraList_<%=cid %>.add("--context_param " + key_<%=cid %> + "=" + value_<%=cid %>);
			} else {
				paraList_<%=cid %>.add("--context_param " + key_<%=cid %> + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			<%
			if(printParameter) {
			%>
			if(parametersToEncrypt_<%=cid %> .contains(key_<%=cid %>) && value_<%=cid %> != null) {
				paraListForLog_<%=cid %>.add("--context_param " + key_<%=cid %> + "=" + routines.system.PasswordEncryptUtil.encryptPassword(String.valueOf(value_<%=cid %>)));
			} else {
				paraListForLog_<%=cid %>.add("--context_param " + key_<%=cid %> + "=" + value_<%=cid %>);
			}
			<%
			}
			%>
		}
		<%
	}//111111
	%>

	Object obj_<%=cid%> = null;

	<%
	for (int i=0; i<contextParams.size(); i++) {
		Map<String, String> contextParam = contextParams.get(i);
		String name = contextParam.get("PARAM_NAME_COLUMN");
		String value = contextParam.get("PARAM_VALUE_COLUMN");
		//bug22181
		if(parallelIterate && value!=null && value.contains("context.")) {
			value = value.replace("context.","localContext.");
		}
		%>
		obj_<%=cid%> = <%=value %>;
		if(obj_<%=cid%>!=null) {
			if (obj_<%=cid %>.getClass().getName().equals("java.util.Date")) {
				paraList_<%=cid %>.add("--context_param <%=name %>=" + ((java.util.Date) obj_<%=cid %>).getTime());
			} else {
				paraList_<%=cid %>.add("--context_param <%=name %>=" + RuntimeUtils.tRunJobConvertContext(obj_<%=cid%>));
			}
		} else {
			paraList_<%=cid %>.add("--context_param <%=name %>=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		<% if(printParameter){ %>
		if(parametersToEncrypt_<%=cid %> .contains("<%=name %>") && obj_<%=cid%> != null) {
			paraListForLog_<%=cid %>.add("--context_param <%=name %>=" + routines.system.PasswordEncryptUtil.encryptPassword(String.valueOf(RuntimeUtils.tRunJobConvertContext(obj_<%=cid%>))));
		} else {
			paraListForLog_<%=cid %>.add("--context_param <%=name %>=" + RuntimeUtils.tRunJobConvertContext(obj_<%=cid%>));
		}
		<% } %>
		parentContextMap_<%=cid %>.put("<%=name %>", obj_<%=cid%>);
	<%
	}
	%>
	<%if(printParameter){%>
		System.out.println("<%=cid %> in <%=currentProcess.getName() %> call <%if(!useDynamicJob){%><%=childJob %><%}else{%>"+<%=dynamicJobName%>+"<%}%> with:\n\n" + paraListForLog_<%=cid %> + "\n");
	<%
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
	if (!useIndependentProcess){//AAAAAAAAAAAA
	%>
		<%=childJob %> childJob_<%=cid %> = new <%=childJob %>();
        <%
            if (ProcessorUtilities.isEsbJob(currentProcess)) {
        %>
        if (childJob_<%=cid %> instanceof routines.system.api.TalendESBJob) {
            ((routines.system.api.TalendESBJob)childJob_<%=cid %>).setEndpointRegistry(registry);
        }

        <%
            }
        %>
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_<%=cid%>) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_<%=cid%> = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_<%=cid%> : talendDataSources_<%=cid%>
			        .entrySet()) {
	            dataSources_<%=cid%>.put(talendDataSourceEntry_<%=cid%>.getKey(),
	                    talendDataSourceEntry_<%=cid%>.getValue().getRawDataSource());
	        }
	        childJob_<%=cid %>.setDataSources(dataSources_<%=cid%>);
	    }
		<%if(originalContext){%>  
			childJob_<%=cid %>.parentContextMap = parentContextMap_<%=cid %>;
		<%}%>  
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - The child job '<%if(!useDynamicJob){%><%=childJob %><%}else{%>"+<%=dynamicJobName%>+"<%}%>' starts on the version '<%=version%>' with the context '<%=context%>'.");
		<%}%>
		String[][] childReturn_<%=cid %> = childJob_<%=cid %>.runJob((String[]) paraList_<%=cid %>.toArray(new String[paraList_<%=cid %>.size()]));
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - The child job '<%if(!useDynamicJob){%><%=childJob %><%}else{%>"+<%=dynamicJobName%>+"<%}%>' is done.");
		<%}%>
<%
		if (childJob != null) {
%>
            if(childJob_<%=cid %>.getErrorCode() == null){
                globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getStatus() != null && ("failure").equals(childJob_<%=cid %>.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("<%=cid %>_CHILD_RETURN_CODE", childJob_<%=cid %>.getErrorCode());
            }
            if (childJob_<%=cid %>.getExceptionStackTrace() != null) {
                globalMap.put("<%=cid %>_CHILD_EXCEPTION_STACKTRACE", childJob_<%=cid %>.getExceptionStackTrace());
            }
<%
            if (dieOnError) {
                if (isRunInMultiThread){
%>
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_<%=cid %>.getErrorCode());
<%
                }else {
%>
                    errorCode = childJob_<%=cid %>.getErrorCode();
<%
                }
%>
                if (childJob_<%=cid %>.getErrorCode() != null || ("failure").equals(childJob_<%=cid %>.getStatus())) {
                    java.lang.Exception ce_<%=cid%> = childJob_<%=cid %>.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_<%=cid%>!=null) ? (ce_<%=cid%>.getClass().getName() + ": " + ce_<%=cid%>.getMessage()) : ""));
                }
<%
            }
        }

		String firstConnName = null; 
		if(outConns != null && outConns.size() > 0) {
			for (IConnection conn : outConns) {
				if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)){
	      			firstConnName = conn.getName(); //get the first available flow link
	      			break;
	      		}
	    	}
		}
		boolean inConnNull = false;
		if(inConns == null || inConns.size() == 0) {
			inConnNull = true; 
		}
		if(firstConnName != null && (isPropagateChildResult || inConnNull)) {//b
			List<BlockCode> blockCodes = new java.util.ArrayList<BlockCode>(1);
			blockCodes.add(new BlockCode("C_01"));
			((org.talend.core.model.process.AbstractNode) node).setBlocksCodeToClose(blockCodes);
	    	%>
			for (String[] item_<%=cid %> : childReturn_<%=cid %>) { 
				if(childJob_<%=cid %>.hastBufferOutputComponent() || <%=inConnNull%>){
			    	<%
					int columnSize = columns.size();
					for (int i = 0; i < columnSize; i++) {//a
						IMetadataColumn column = columns.get(i);
						String label = column.getLabel();
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
						JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
						String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
			        	%>		
						if(<%=i %> < item_<%=cid %>.length){				
			           		<%if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {%>
				           		<%=firstConnName %>.<%=label %> = item_<%=cid %>[<%=i %>];
			           		<%} else if(javaType == JavaTypesManager.DATE) {%>
				           		<%=firstConnName %>.<%=label %> = ParserUtils.parseTo_Date(item_<%=cid %>[<%=i %>], <%= patternValue %>);
			           		<%} else if(javaType == JavaTypesManager.BYTE_ARRAY){%>							
			           			<%=firstConnName %>.<%=label %> = item_<%=cid %>[<%=i %>].getBytes();
			           		<%}else if(javaType == JavaTypesManager.LIST) {%>
			           			<%=firstConnName %>.<%=label %> = ParserUtils.parseTo_<%= typeToGenerate %>(item_<%=cid %>[<%=i %>], ",");
			           		<%} else {%>
			           			<%=firstConnName %>.<%=label %> = ParserUtils.parseTo_<%= typeToGenerate %>(item_<%=cid %>[<%=i %>]);
			           		<%}%>
		           		}else{
			           		<%=firstConnName %>.<%=label %> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
		           		}
					<%
					}//a
					if (inConnNull==false && propagateData) {//d
					%>
						} else {
						<%
						for (IConnection conn : node.getOutgoingConnections()) {
							if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.MAIN)) {
								IMetadataTable outputMetadataTable = conn.getMetadataTable();
								if (outputMetadataTable!=null) {
									for (IMetadataColumn outputCol : outputMetadataTable.getListColumns()) { 
										if (inputCols.contains(outputCol.getLabel())) {
										%>
											<%=conn.getName() %>.<%=outputCol.getLabel() %> = <%=inputConnName %>.<%=outputCol.getLabel() %>;
										<%
										}
									}
								}
								break;
							}
						}
					}//d
					%>
				}
		<%
		}//b  
	} else { //AAAAAAAAAAAA

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	// use independent process to run subjob
	%>
				class ConsoleHelper_<%=cid %> {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",ioe.getMessage());
						            <%if(isLog4jEnabled){%>
										log.error("<%=cid %> - " + ioe.getMessage());
						            <%}%>
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",ioe.getMessage());
						            <%if(isLog4jEnabled){%>
										log.error("<%=cid %> - " + ioe.getMessage());
						            <%}%>
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_<%=cid %> consoleHelper_<%=cid %> = new ConsoleHelper_<%=cid %>();

		Runtime runtime_<%=cid %> = Runtime.getRuntime();
		Process ps_<%=cid %> = null;

		//0 indicates normal termination
        int result_<%=cid %>;
        StringBuffer errorMsg_<%=cid %> = new StringBuffer();
        try {
            ps_<%=cid %> = runtime_<%=cid %>.exec((String[])paraList_<%=cid %>.toArray(new String[paraList_<%=cid %>.size()]));

            Thread normal_<%=cid %> = consoleHelper_<%=cid %>.getNormalThread(ps_<%=cid %>);
            <%if(isLog4jEnabled){%>
                log.info("<%=cid%> - The child job '<%if(!useDynamicJob){%><%=childJob %><%}else{%>"+<%=dynamicJobName%>+"<%}%>' starts on the version '<%=version%>' with the context '<%=context%>'.");
            <%}%>
            normal_<%=cid %>.start();
            <%if(isLog4jEnabled){%>
                log.info("<%=cid%> - The child job '<%if(!useDynamicJob){%><%=childJob %><%}else{%>"+<%=dynamicJobName%>+"<%}%>' is done.");
            <%}%>

            Thread error_<%=cid %> = consoleHelper_<%=cid %>.getErrorThread(ps_<%=cid %>, errorMsg_<%=cid %>);
            error_<%=cid %>.start();

            result_<%=cid %> = ps_<%=cid %>.waitFor();
            normal_<%=cid %>.join();
            error_<%=cid %>.join();
        } catch (ThreadDeath tde) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",tde.getMessage());
            <%if(isLog4jEnabled){%>
            	log.error("<%=cid %> - thread was terminated.");
            <%}%>
            ps_<%=cid %>.destroy();
            throw tde;
        }

		globalMap.put("<%=cid %>_CHILD_RETURN_CODE",result_<%=cid %>);
		if(result_<%=cid %> != 0){
   			globalMap.put("<%=cid %>_CHILD_EXCEPTION_STACKTRACE",errorMsg_<%=cid %>.toString());
			<%if (dieOnError) { %>  
	    		throw new RuntimeException("Child job returns " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
			<%}else{%>
				<%if(isLog4jEnabled){%>
					log.error("<%=cid %> - Child job returns " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
				<%}%>
				System.err.println("Child job returns " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
			<%}%>
  		}

		<%
		String firstConnName = null; 
		if(outConns != null && outConns.size() > 0) {
			for (IConnection conn : outConns) {
				if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
					firstConnName = conn.getName(); //get the first available flow link
					break;
				}
			}
		}
		if(firstConnName != null) {//b
	    	if(inConns == null || inConns.size() == 0){//c
			%>
				<%if(isLog4jEnabled){%>
					log.error("<%=cid %> - Child job returns " + result_<%=cid %> + ". It doesn't terminate normally.\n" + errorMsg_<%=cid %>.toString());
				<%}%>
  				System.err.println("when tRunJob runs in an independent process, it can't extract datas from tBufferOutput of child job."); 
			<%
			}//c
		}//b  
	}//AAAAAAAAAAAA
	%>
