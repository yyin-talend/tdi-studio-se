<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IProcess
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	IProcess process = node.getProcess();
	final String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");


	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	boolean setAutoCommit = false;

	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    boolean  identityInsert= "true".equals(ElementParameterParser.getValue(node, "__IDENTITY_INSERT__"));

    boolean ignoreDateOutofRange = ("true").equals(ElementParameterParser.getValue(node,"__IGNORE_DATE_OUTOF_RANGE__"));
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String incomingConnName = null;
	boolean usingStatsLogs=cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB");
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    boolean useBatchSize = "true".equals(ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__"));

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConnection) {
        List<? extends INode> nodes = process.getNodesOfType("tAzureSynapseConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
                break;
            }
        }
    }

    boolean useBatch = useBatchSize && (rejectConnName == null)
                     && (
                          ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                        );

    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    boolean isUseParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	boolean  isSpecifyIdentityKey = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_IDENTITY_FIELD__"));
	if(isDynamic || isUseParallelize || identityInsert || (!"DROP_CREATE".equals(tableAction) && !"CREATE".equals(tableAction) && !"DROP_IF_EXISTS_AND_CREATE".equals(tableAction))){
		isSpecifyIdentityKey = false;
	}
    String identityKey = ElementParameterParser.getValue(node, "__IDENTITY_FIELD__");
	if(identityInsert && useExistingConnection ) {
        %>
		if ( isShareIdentity_<%=cid%> ) {
			String setIdentityInsertONSQL_<%=cid%> = "SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] ON";
			<%dbLog.data().sqlExecuteTry(dbLog.var("setIdentityInsertONSQL"));%>
        	stmt_<%=cid %>.execute(setIdentityInsertONSQL_<%=cid%>);
			<%dbLog.data().sqlExecuteDone(dbLog.var("setIdentityInsertONSQL"));%>
        }
        <%
    }
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else if (("INSERT_IF_NOT_EXIST").equals(dataAction)) {
    %>
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
    <%
    } else if("SINGLE_INSERT".equals(dataAction)){
    	class SingleQueryInsertOperation {
	        public String generateType(String typeToGenerate){
	            if(("byte[]").equals(typeToGenerate)){
	                typeToGenerate = "Bytes";
	            }else if(("java.util.Date").equals(typeToGenerate)){
	                typeToGenerate = "Date";
	            }else if(("Integer").equals(typeToGenerate)){
	                typeToGenerate = "Int";
	            }else if(("List").equals(typeToGenerate)){
	                typeToGenerate = "Object";
	            }else{
	                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
	            }
	            return typeToGenerate;
	        }

	        public void generateSetStmt(String typeToGenerate,Column column,String cid,String incomingConnName,boolean ignoreDateOutofRange,String dbmsId){
	            boolean isObject = false;
	            String prefix = "pstmt_";
    %>

    <%
    if(("Character").equals(typeToGenerate)) {
        isObject = true;
     %>
        if(bufferL<%=cid%>.<%=column.getName()%>==null){
            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
		<%
		    }else if(("Date").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
		<%
		    }else if(("byte[]").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);
		<%
		    }else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
		<%
		    }else if(("String").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
		<%
		    }else if(("Object").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
		<%
		    }else if(("Boolean").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);
		<%
		    }else if(("Double").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);
		<%
		    }else if(("Float").equals(typeToGenerate)){
		        isObject = true;
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT);
		<%
		    }
		    if(isObject){
		%>

		        }else{
		<%
		    }
		    typeToGenerate = generateType(typeToGenerate);

		    if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
		%>
		<%
		    if(isObject) {
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>==null){
		<%
		    } else {
		%>
		        if(("null").equals(String.valueOf(bufferL<%=cid%>.<%=column.getName()%>).toLowerCase())){
		<%
		    }
		%>
		    <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);

		    } else if(bufferL<%=cid%>.<%=column.getName()%> == '\0') {

		        <%=prefix+cid%>.setString(count<%=cid%>,"");

		    } else {

		        <%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getName()%>));
		    }
		<%
		    }else if(("Date").equals(typeToGenerate)){
		    	String dbType = column.getColumn().getType();
				if(dbType==null || "".equals(dbType.trim())){
					MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbmsId);
					dbType = mappingType.getDefaultSelectedDbType(column.getColumn().getTalendType());
				}
		%>
		        if(bufferL<%=cid%>.<%=column.getName()%>!=null){
		            // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
		            date_<%=cid %> = bufferL<%=cid%>.<%=column.getName()%>.getTime();
		            if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
		                <%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
		            } else {
				<%if(ignoreDateOutofRange){
                	if(("DATE".equals(dbType) || "DATETIME2".equals(dbType))){
                		String pattern = column.getColumn().getPattern();
                %>
                    	<%=prefix+cid%>.setString(count<%=cid%>,TalendDate.formatDate(<%=pattern%>, <%=incomingConnName%>.<%=column.getName()%>));
				<%
					} else if("DATETIMEOFFSET".equals(dbType)) {
				%>
						<%=prefix+cid%>.setString(count<%=cid%>,TalendDate.formatDatetimeoffset(<%=incomingConnName%>.<%=column.getName()%>));
				<%
					}else{
				%>
		                <%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
				<%
					}
				}else{
				%>
		         <%if("DATETIMEOFFSET".equals(dbType)){%>
		                <%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>),calendar_datetimeoffset_<%=cid%>);
		         <%} else {%>
		         		<%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
		         <%}%>
				<%
				}
				%>
		            }
		        }else{
		            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
		        }
		<%
		    }else{
		%>
		        <%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getName()%>);
		        <%
		    }
		    if(isObject){
		        %>
		        }
		<%
		    }
		   }
		}
		SingleQueryInsertOperation siOperation = new SingleQueryInsertOperation();
		%>
		if(rowCount<%=cid%>!=0){

		StringBuilder singleQueryInsertValueStmt = new StringBuilder();
		for(int i=0 ; i < rowCount<%=cid%> ; i++){
		     singleQueryInsertValueStmt.append("("+insertColValue<%=cid%>+")");
		     if (i != rowCount<%=cid%> - 1)
		    	 singleQueryInsertValueStmt.append(",");
		}

		insert_<%=cid%> = "INSERT INTO "+<%=tableName%>+" ("+insertColName<%=cid%>+") VALUES "+singleQueryInsertValueStmt.toString();

		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
		int row2Count<%=cid%> = 0;
		<%
		if(isDynamic) {
		%>
			int count<%=cid%> = 1;
		<%
		} else {
		%>
		int count<%=cid%> = 0;
		<%
		}
		%>

		for(BufferLine_<%=cid%> bufferL<%=cid%> : sInsertColValueList<%=cid%>){
		<%
		if(!isDynamic) {
			if(isSpecifyIdentityKey) {
			%>
		    	count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()-1%>+1;
			<%
          	}else{
          	%>
		    	count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()%>+1;
			<%
          	}
		}
		    for(Column column : stmtStructure) {
		        if(!column.isReplaced() && !column.isAddCol() && column.isInsertable() && !column.isDynamic()) {
		        	if(isSpecifyIdentityKey && (column.getName().equals(identityKey))) {
                   		continue;
               		}
		            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
		            siOperation.generateSetStmt(typeToGenerate, column, cid,incomingConnName,ignoreDateOutofRange,dbmsId);
		            %>
		            count<%=cid%>++;
		            <%
		        }
		    }
		if(isDynamic) {
			Column dynamicColumn = getColumn(getDynamicColumn());
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
			if("Dynamic".equals(typeToGenerate)) {
			%>
				int count_dyn_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, count<%=cid%>-1, "<%=dbmsId%>");
				count<%=cid%>+=count_dyn_<%=cid%>;
			<%
			}
		}
		    %>

		    row2Count<%=cid%>++;
		}
		int processedCount_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		insertedCount_<%=cid%> += processedCount_<%=cid%>;
		rowsToCommitCount_<%=cid%> += processedCount_<%=cid%>;
		}
   <% }else {
   %>
          <%
          if (useBatch) {
                %>
                try {
						int countSum_<%=cid%> = 0;
						if (pstmt_<%=cid %> != null && batchSizeCounter_<%=cid%> > 0) {
							<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
							for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
								if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
									break;
								}
								countSum_<%=cid%> += countEach_<%=cid%>;
							}
							rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
							<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
						}
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>
                }catch (java.sql.BatchUpdateException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
					<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}
            	    	dbLog.logPrintedException("e.getMessage()");
            	    	%>
                		System.err.println(e.getMessage());
                	<%
                	}%>
            	}
                <%
                }%>
        if(pstmt_<%=cid %> != null) {
			<%
			//to fixed: bug8422
			if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %>.close();
				resourceMap.remove("pstmt_<%=cid %>");
			<%
			}else{
			%>
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_<%=cid%>);
				resourceMap.remove("keyPsmt_<%=cid%>");
			<%
			}
			%>
        }
        <%
    }

if(identityInsert){
%>
    String setIdentityInsertOFFSQL_<%=cid%> = "SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] OFF";
    <%dbLog.data().sqlExecuteTry(dbLog.var("setIdentityInsertOFFSQL"));%>
    stmt_<%=cid %>.execute(setIdentityInsertOFFSQL_<%=cid%>);
    <%dbLog.data().sqlExecuteDone(dbLog.var("setIdentityInsertOFFSQL"));%>
    stmt_<%=cid %>.close();
<%
}
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
    <%
    if(!useExistingConnection)
    {
        if(!("").equals(commitEvery) && !("0").equals(commitEvery))
        {
            %>
            if(commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0){
            	<%dbLog.commit().commitTry(null, dbLog.var("rowsToCommitCount"));%>
            }
            conn_<%=cid%>.commit();
            if(commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0){
            	<%dbLog.commit().commitDone(null);%>
            	rowsToCommitCount_<%=cid%> = 0;
            }
            commitCounter_<%=cid%> = 0;
            <%
        }

        commitEvery = "0";
        %>
        <%dbLog.conn().closeTry(null);%>
        conn_<%=cid%> .close();
        <%dbLog.conn().closeDone(null);%>
        resourceMap.put("finish_<%=cid%>", true);
        <%
    }
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
