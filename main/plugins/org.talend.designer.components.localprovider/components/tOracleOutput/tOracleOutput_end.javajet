<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
    java.util.List
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.process.IProcess
	org.talend.core.model.utils.NodeUtil
"
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	dbLog = new DBLogUtil(node);

	IProcess process = node.getProcess();

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	String dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");

	boolean setAutoCommit = false;

	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));;

	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");

	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");

	String tableName = ElementParameterParser.getValue(node,"__TABLE__");

	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");

	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));

	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));

	String indexAccuracy = ElementParameterParser.getValue(node, "__SPATIAL_INDEX_ACCURACY__");

	String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
    String useBatchAndUseConn = ElementParameterParser.getValue(node,"__USE_BATCH_AND_USE_CONN__");

    String batchSize =ElementParameterParser.getValue(node, "__BATCH_SIZE__");

	String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    
	INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
	

    boolean useBatch = true;
    if(useExistingConnection){
        useBatch = rejectConnName == null  && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchAndUseConn);
    }else{
        useBatch = rejectConnName == null  && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchSize);
    }

	List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();
    }

    if(useExistingConnection) {
        List<? extends INode> nodes = process.getNodesOfType("tOracleConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
                break;
            }
        }
    }

    if (useSpatialOptions && (("DROP_CREATE").equals(tableAction) || ("CREATE").equals(tableAction)
    		|| ("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction))) {

	    int targetSRID = -1;
	    try {
	      	targetSRID = Integer.parseInt(ElementParameterParser.getValue(node,"__SRID__"));
	    }
	    catch (NumberFormatException e) {
		%>
	     	// TODO unable to parse integer: <%=ElementParameterParser.getValue(node,"__SRID__")%>
	     	// TODO error: <%=e.getMessage()%>
			<%
	     	e.printStackTrace();
	    }
		%>
		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();

		// Delete geometry columns entry if already exists.
		String deleteGeometryColumns_<%=cid %> = "DELETE FROM user_sdo_geom_metadata "
												+ "WHERE TABLE_NAME='" + <%=tableName.toUpperCase(java.util.Locale.US) %> + "'";
		<%dbLog.data().sqlExecuteTry(dbLog.var("deleteGeometryColumns"));%>
		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);
		<%dbLog.data().sqlExecuteDone(dbLog.var("deleteGeometryColumns"));%>

		for (String column: geometryColumnToExtends.keySet()) {
		    com.vividsolutions.jts.geom.Envelope extend = geometryColumnToExtends.get(column);

			// Create new entry in geometry columns table
	        String insertGeometryColumns_<%=cid %> = "INSERT INTO user_sdo_geom_metadata (TABLE_NAME, COLUMN_NAME, DIMINFO, SRID) VALUES ('"
	        										+ <%=tableName.toUpperCase(java.util.Locale.US) %> + "','" + column.toUpperCase(java.util.Locale.US) + "', "
	        										+ "MDSYS.SDO_DIM_ARRAY(MDSYS.SDO_DIM_ELEMENT('x', " + extend.getMinX() + ", " + extend.getMaxX() + ", <%=indexAccuracy %>), "
	        										+ "MDSYS.SDO_DIM_ELEMENT('y', " + extend.getMinY() + ", " + extend.getMaxY() + ", <%=indexAccuracy %>)), "
	        										+ <%=targetSRID < 0 ? "\"NULL\"" : targetSRID %> +")";
			<%dbLog.data().sqlExecuteTry(dbLog.var("insertGeometryColumns"));%>
	    	stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
			<%dbLog.data().sqlExecuteDone(dbLog.var("insertGeometryColumns"));%>
    	}

        stmtCreateGeoColumns_<%=cid%>.close();
	<%
	}
	if (createSpatialIndex && useSpatialOptions) {
	%>
		for (String geometryColumnName: geometryColumnToExtends.keySet()) {

			String index_name = "spatialidx_"+<%=tableName %>+"_" + geometryColumnName;
			if (index_name.length() > 30) {
				index_name = index_name.substring(0, 29);
			}

	    	java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
			// Drop spatial index if exists
			String dropIndex_<%=cid %> = "DROP INDEX "+index_name;
	        try {
				<%dbLog.data().sqlExecuteTry(dbLog.var("dropIndex"));%>
				stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
				<%dbLog.data().sqlExecuteDone(dbLog.var("dropIndex"));%>
			}
			catch (java.sql.SQLException e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
				<%dbLog.logIgnoredException("e_"+cid+".getMessage()");%>
			}

			// Create spatial index using GIST on geometry columns
			String createIndex_<%=cid %> = "CREATE INDEX "+index_name + " "
						+ "ON " + <%=tableName %> + "(" + geometryColumnName + ") "
						+ "INDEXTYPE IS MDSYS.SPATIAL_INDEX";
			<%dbLog.data().sqlExecuteTry(dbLog.var("createIndex"));%>
	        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
			<%dbLog.data().sqlExecuteDone(dbLog.var("createIndex"));%>
	        stmtCreateIndex_<%=cid%>.close();
	    }
	<%
	}



    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else { // dataAction equals "INSERT" or "UPDATE" or "DELETE"
    	if (useBatch) {
        %>
        if(batchSizeCounter_<%=cid%> > 0) {
            try {
            	if (pstmt_<%=cid %> != null) {
					<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
					pstmt_<%=cid %>.executeBatch();
					<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
        	    }
            }catch (java.sql.BatchUpdateException e_<%=cid%>){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		        java.sql.SQLException ne_<%=cid%> = e_<%=cid%>.getNextException(),sqle_<%=cid%>=null;
		    	String errormessage_<%=cid%>;
				if (ne_<%=cid%> != null) {
					// build new exception to provide the original cause
					sqle_<%=cid%> = new java.sql.SQLException(e_<%=cid%>.getMessage() + "\ncaused by: " + ne_<%=cid%>.getMessage(), ne_<%=cid%>.getSQLState(), ne_<%=cid%>.getErrorCode(), ne_<%=cid%>);
					errormessage_<%=cid%> = sqle_<%=cid%>.getMessage();
				}else{
					errormessage_<%=cid%> = e_<%=cid%>.getMessage();
				}
            	<%
            	if(("true").equals(dieOnError)) {
           		%>
		    		if (ne_<%=cid%> != null) {
		    			throw(sqle_<%=cid%>);
		    		}else{
		            	throw(e_<%=cid%>);
		            }
            	<%
            	}else {
    			    dbLog.logPrintedException("errormessage_"+cid);
    				%>
                	System.err.println(errormessage_<%=cid%>);
            	<%
            	}
            	%>
        	}
        	if (pstmt_<%=cid %> != null) {
            	tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
    	    	<%
    	    	if (("INSERT").equals(dataAction)) {
    	    	%>
    	    		insertedCount_<%=cid%>
    	    	<%
    	    	}else if (("UPDATE").equals(dataAction)) {
    	    	%>
    	    		updatedCount_<%=cid%>
    	    	<%
    	    	}else if (("DELETE").equals(dataAction)) {
    	    	%>
    	    	    deletedCount_<%=cid%>
    	    	<%
    	    	}
    	    	%>
    	    	+= (tmp_batchUpdateCount_<%=cid%>!=-1?tmp_batchUpdateCount_<%=cid%>:0);
				rowsToCommitCount_<%=cid%> += (tmp_batchUpdateCount_<%=cid%>!=-1?tmp_batchUpdateCount_<%=cid%>:0);
            }
        }
        <%
        }
       	%>
        if(pstmt_<%=cid %> != null) {
			<%
			//to fixed: bug8422
			if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %>.close();
				resourceMap.remove("pstmt_<%=cid %>");
			<%
			}else{
			%>
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_<%=cid%>);
				resourceMap.remove("keyPsmt_<%=cid%>");
			<%
			}
			%>
        }
    <%
    }
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
<%
	if(!useExistingConnection){
		if(!("").equals(commitEvery) && !("0").equals(commitEvery)){
		%>
		if(commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
			<%dbLog.commit().commitTry(null, dbLog.var("rowsToCommitCount"));%>
		}
		conn_<%=cid%>.commit();
		if(commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
			<%dbLog.commit().commitDone(null);%>
			rowsToCommitCount_<%=cid%> = 0;
		}
		commitCounter_<%=cid%> = 0;
		<%
		}
		%>
		<%dbLog.conn().closeTry(null);%>
		conn_<%=cid%> .close();
		<%dbLog.conn().closeDone(null);%>
		resourceMap.put("finish_<%=cid%>", true);
   	<%
	}
    %>

	<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>


