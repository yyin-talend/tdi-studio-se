<%@ jet
imports="
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType
        java.util.List
        java.util.ArrayList
        java.util.Map
        java.util.HashMap
        org.talend.core.model.process.IProcess
        org.talend.core.model.utils.NodeUtil
    "
skeleton="../templates/db_output_bulk.skeleton"
%>
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
    <%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    dbLog = new DBLogUtil(node);

    List<Map<String, String>> addCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__" );
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    String dbport = ElementParameterParser.getValue(node, "__PORT__");
    String dbuser= ElementParameterParser.getValue(node, "__USER__");
    String table = ElementParameterParser.getValue(node,"__TABLE__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    String tableSchema = ElementParameterParser.getValue(node,"__TABLESCHEMA__");
    boolean convertToUppercase = ("true").equals(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
    String useBatchSize = ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__");
    String useBatchAndUseConn = ElementParameterParser.getValue(node,"__USE_BATCH_AND_USE_CONN__");
    String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
    boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
    boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
    boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");

	boolean useAlternateSchema = "true".equals(ElementParameterParser.getValue(node, "__USE_ALTERNATE_SCHEMA__"));
	
	boolean containBlobFromOtherDB = "true".equals(ElementParameterParser.getValue(node, "__CONTAIN_BLOB_FROM_OTHER_DB__"));
	
	String alternateSchema = ElementParameterParser.getValue(node,"__ALTERNATE_SCHEMA__");
	
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

	INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
	
    boolean useBatch = true;
    if(useExistingConnection){
        useBatch = rejectConnName == null  && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchAndUseConn);
    }else{
        useBatch = rejectConnName == null  && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && ("true").equals(useBatchSize);
    }


    if (useSpatialOptions) {
        int targetSRID = -1;
        try {
            targetSRID = Integer.parseInt(ElementParameterParser.getValue(node,"__SRID__"));
        }
        catch (NumberFormatException e) {
        %>
            // TODO unable to parse integer: <%=ElementParameterParser.getValue(node,"__SRID__")%>
            // TODO error: <%=e.getMessage()%>
            <%
            e.printStackTrace();
        }
        %>
        /* initialize feature count */
        int nbFeature_<%=cid %> = 0;

        java.util.Map<String, com.vividsolutions.jts.geom.Envelope> geometryColumnToExtends = new java.util.HashMap<String, com.vividsolutions.jts.geom.Envelope>();
    <%
    }
    %>


    <%
    getManager(dbmsId, cid, node);

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
        isDynamic = metadata.isDynamicSchema();
    }

    List<IMetadataColumn> columnList = getColumnList(node);
    List<Column> stmtStructure = null;
    Manager manager = null;

    if(columnList != null && columnList.size() > 0) {
        stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
        isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

        if(convertToUppercase) {
            for(Column column : stmtStructure) {
                if(column.isReplaced()) {
                    for (Column replacedColumn : column.getReplacement()) {
                        replacedColumn.setColumnName(replacedColumn.getColumnName().toUpperCase());
                    }
                } else if(!column.isDynamic()){
                    column.setColumnName(column.getColumnName().toUpperCase());
                }
            }
        }
    }
    boolean xmlTypeExist = false;
    boolean clobTypeExist = false;
    boolean blobTypeExist = false;
    for(Column column : stmtStructure) {
        //when use Additional column column.getColumn() == null
        if (column.getColumn()!= null && "XMLTYPE".equals(column.getColumn().getType()) && !column.isDynamic()) {
            column.setSqlStmt("XMLType(?)");
            xmlTypeExist = true;
        }
        if (column.getColumn()!= null) {
            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
            if (typeToGenerate.equals("Object") && !column.isDynamic()) {
            	if("CLOB".equals(column.getColumn().getType())) {
                	clobTypeExist = true;
                } else if("BLOB".equals(column.getColumn().getType())) {
                	blobTypeExist = true;
                }
            }
        }
    }
    %>

    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Output/CheckKeysForUpdateAndDelete.javajet"%>
    
    int nb_line_<%=cid%> = 0;
    int nb_line_update_<%=cid%> = 0;
    int nb_line_inserted_<%=cid%> = 0;
    int nb_line_deleted_<%=cid%> = 0;
    int nb_line_rejected_<%=cid%> = 0;

    int tmp_batchUpdateCount_<%=cid%> = 0;

    int deletedCount_<%=cid%>=0;
    int updatedCount_<%=cid%>=0;
    int insertedCount_<%=cid%>=0;
    int rowsToCommitCount_<%=cid%>=0;
    int rejectedCount_<%=cid%>=0;

    boolean whetherReject_<%=cid%> = false;

    java.sql.Connection conn_<%=cid%> = null;

    //optional table
    String dbschema_<%=cid%> = null;
    String tableName_<%=cid%> = null;
    <%
    if(useExistingConnection) {
        String conn = "conn_" + connection;
        if(useAlternateSchema) {
        %>
		dbschema_<%=cid%> = <%=alternateSchema%>;
        <%
        } else {
        String schema = "dbschema_" + connection;
        %>
        dbschema_<%=cid%> = (String)globalMap.get("<%=schema%>");
		<%
		}
		%>
        conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
        <%dbLog.conn().useExistConn("conn_"+cid+".getMetaData().getURL()", "conn_"+cid+".getMetaData().getUserName()");%>
    <%
    } else {
        boolean specify_alias = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_DATASOURCE_ALIAS__"));
        if(specify_alias){
            String alias = ElementParameterParser.getValue(node, "__DATASOURCE_ALIAS__");
            %>
            java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
            if (null != dataSources_<%=cid%>) {
    			String dsAlias_<%=cid%> = <%=(null != alias && !("".equals(alias)))?alias:"\"\""%>;
        		if (dataSources_<%=cid%>.get(dsAlias_<%=cid%>) == null) {
           			throw new RuntimeException("No DataSource with alias: " + dsAlias_<%=cid%> + " available!");
              	}
        		conn_<%=cid%> = dataSources_<%=cid%>.get(dsAlias_<%=cid%>).getConnection();
    		} else {
        <%
        }
        %>
                <%if("ORACLE_11".equals(dbVersion) || "ORACLE_12".equals(dbVersion) || "ORACLE_18".equals(dbVersion) ){%>
                    String driverClass_<%=cid%> = "oracle.jdbc.OracleDriver";
                <%}else {%>
                    String driverClass_<%=cid%> = "oracle.jdbc.driver.OracleDriver";
                <%}%>

                <%dbLog.conn().logJDBCDriver(dbLog.var("driverClass"));%>

                java.lang.Class.forName(driverClass_<%=cid%>);
                <%
                String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
                String jdbcURL = ElementParameterParser.getValue(node, "__JDBC_URL__");
                String rac_url = ElementParameterParser.getValue(node, "__RAC_URL__");
                %>
                String url_<%=cid%> = null;
                <%
                if("ORACLE_RAC".equals(connectionType)) {
                %>
                    url_<%=cid %> = <%=rac_url%>;
                <%
                } else if(("ORACLE_SID").equals(connectionType)) {
                %>
                    url_<%=cid%> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
                <%
                } else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
                %>
                    url_<%=cid%> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
                <%
                } else if(("ORACLE_OCI").equals(connectionType)) {
                %>
                    url_<%=cid%> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;;
                <%
                }else if(("ORACLE_WALLET").equals(connectionType)) {
                %>
                    url_<%=cid%> = <%=jdbcURL%>;
                <%
                }
                %>
                String dbUser_<%=cid%> = <%=dbuser%>;
                <%
                String passwordFieldName = "__PASS__";
                %>

                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

                String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
                dbschema_<%=cid%> = <%=tableSchema%>;

                <%dbLog.conn().connTry(dbLog.var("url"), dbLog.var("dbUser"));%>

                <%
                if(("ORACLE_WALLET").equals(connectionType)) {
                %>
                    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
                    if(dbschema_<%=cid%>==null||"".equals(dbschema_<%=cid%>)) //get schema from connection
                    {
                        dbschema_<%=cid%>=conn_<%=cid%>.getMetaData().getUserName();
                    }

                <%
                }else if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
                %>
                    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
                <%
                } else {
                %>
                    java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
                    atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
                    atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
                    if(<%= dbproperties %> != null && !"\"\"".equals(<%= dbproperties %>) && !"".equals(<%= dbproperties %>)){
                        atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(<%=dbproperties%>.replace("&", "\n").getBytes()));
                    }
                    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
                <%
                }
                %>
                <%dbLog.conn().connDone(dbLog.var("url"));%>
        <%
        if(specify_alias){
        %>
            }
        <%
        }
        %>
        resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
        <%
        if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
        %>
            conn_<%=cid%>.setAutoCommit(false);
            int commitEvery_<%=cid%> = <%=commitEvery%>;
            int commitCounter_<%=cid%> = 0;
        <%
        }
    }

    dbLog.commit().logAutoCommit("conn_"+cid+".getAutoCommit()");

    if (useBatch) {
    %>
        int batchSize_<%=cid%> = <%=batchSize%>;
        int batchSizeCounter_<%=cid%>=0;
    <%
    }

    if(!isDynamic) {
    %>
        int count_<%=cid%>=0;
        <%
        ///// hint options/////
        boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
        Map<String, String> hintsValues = null;
        if (useHintOptions) {
            List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
            hintsValues = new HashMap<String, String>();
            String hintValue = null;
            boolean firstInsert = true;
            boolean firstUpdate = true;
            boolean firstDelete = true;
            boolean firstTableName = true;
            for(java.util.Map<String, String> option : hintOptions) {
                //get
                if(option.get("HINT").matches("\"/\\*NORMALIZED_HINT\\*/\"")) {
                    String id = cid.replace(node.getComponent().getName() + "_", "");
                    hintValue = "\"/*\"+" + table + "+\".\" + "  + "\"" + option.get("SQL_STMT")+ ".\"" + "+" +  id   +  "+\"*/\" " ;
                }else if (option.get("HINT").matches("\"/\\*+.*\\*/\"")) {
                    hintValue = option.get("HINT");
                }
                //set
                if ("INSERT".equalsIgnoreCase(option.get("SQL_STMT"))){
                    if(firstInsert){
                        hintsValues.put("INSERT", hintValue) ;
                        firstInsert = false;
                    }else {
                        hintsValues.put("INSERT", hintsValues.get("INSERT") + "+" + hintValue) ;
                    }
                }else if ("UPDATE".equalsIgnoreCase(option.get("SQL_STMT"))) {
                    if(firstUpdate){
                        hintsValues.put("UPDATE", hintValue) ;
                        firstUpdate = false;
                    }else {
                        hintsValues.put("UPDATE", hintsValues.get("UPDATE") + "+" + hintValue) ;
                    }
                }else if ("DELETE".equalsIgnoreCase(option.get("SQL_STMT"))) {
                    if (firstDelete){
                        hintsValues.put("DELETE", hintValue) ;
                        firstDelete =false;
                    }else {
                        hintsValues.put("DELETE", hintsValues.get("DELETE") + "+" + hintValue) ;
                    }
                }else if ("TABLE_NAME".equalsIgnoreCase(option.get("SQL_STMT"))){
                    if (firstTableName){
                        hintsValues.put("TABLE_NAME", hintValue) ;
                        firstTableName = false;
                    }else {
                        hintsValues.put("TABLE_NAME", hintsValues.get("TABLE_NAME") + "+" + hintValue) ;
                    }
                }
            }
        }
        //// hint options end ////
        %>

        if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
            tableName_<%=cid%> = (<%=table%>)<%=convertToUppercase ? ".toUpperCase()" : ""%>;
        } else {
            tableName_<%=cid%> = dbschema_<%=cid%> + "." + (<%=table%>)<%=convertToUppercase ? ".toUpperCase()" : ""%>;
        }
        <%@ include file="../templates/_hintTableName.javajet" %>
        <%
        if(columnList != null && columnList.size()>0) {
        %>
            <%@ include file="../templates/_tableActionForOutput.javajet"%>
            <%
            Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
            StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
            StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
            StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
            StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
            StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

            if(("INSERT").equals(dataAction)) {
            %>
                String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
                <%@ include file="../templates/_hintInsert.javajet" %>

                <%
                //to fixed: bug8422
                if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
                        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                        resourceMap.put("pstmt_<%=cid %>", pstmt_<%=cid %>);
                <%
                }

                //to fixed: bug8422
                if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
                        java.sql.PreparedStatement pstmt_<%=cid %> = null;
                        // [%connection%][psmt][tableName]
                        String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
                        pstmt_<%=cid %> = SharedDBPreparedStatement.getSharedPreparedStatement(conn_<%=cid%>,insert_<%=cid%>,keyPsmt_<%=cid%>);
                        resourceMap.put("keyPsmt_<%=cid %>", keyPsmt_<%=cid %>);
                <%
                }
            } else if (("UPDATE").equals(dataAction)) {
            %>
                String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
                <%@ include file="../templates/_hintUpdate.javajet" %>
                java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                resourceMap.put("pstmt_<%=cid %>", pstmt_<%=cid %>);
            <%
            } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
            %>
                java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + tableName_<%=cid%> + " WHERE <%=updateWhereStmt.toString()%>");
                resourceMap.put("pstmt_<%=cid %>", pstmt_<%=cid %>);
                String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
                <%@ include file="../templates/_hintInsert.javajet" %>
                java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                resourceMap.put("pstmtInsert_<%=cid %>", pstmtInsert_<%=cid %>);
                String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
                <%@ include file="../templates/_hintUpdate.javajet" %>
                java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                resourceMap.put("pstmtUpdate_<%=cid %>", pstmtUpdate_<%=cid %>);
            <%
            } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
            %>
                String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
                <%@ include file="../templates/_hintUpdate.javajet" %>
                java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
                resourceMap.put("pstmtUpdate_<%=cid %>", pstmtUpdate_<%=cid %>);
                String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
                <%@ include file="../templates/_hintInsert.javajet" %>
                java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                resourceMap.put("pstmtInsert_<%=cid %>", pstmtInsert_<%=cid %>);
            <%
            } else if (("DELETE").equals(dataAction)) {
            %>
                String delete_<%=cid%> = "DELETE FROM " + tableName_<%=cid%> + " WHERE <%=deleteWhereStmt.toString()%>";
                <%@ include file="../templates/_hintDelete.javajet" %>
                java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
                resourceMap.put("pstmt_<%=cid %>", pstmt_<%=cid %>);
            <%
            }
            if(isEnableDebug) {
            %>
                StringBuffer query_<%=cid%> = null;
               <%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
            <%
            }
            if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
            %>
                // Initialize SRID
                int SRID_<%=cid %> = 0;
                int dimension_<%=cid %> = 0;
                boolean firstGeometry_<%=cid %> = true;
            <%
            }
        }
    }
    if (xmlTypeExist || clobTypeExist) {
    %>

        class ClobTypeUtil_<%=cid%> {
            public Object getCLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException{
                oracle.sql.CLOB tempClob = null;
                try{
                    // If the temporary CLOB has not yet been created, create one
                    tempClob = oracle.sql.CLOB.createTemporary(conn, true, oracle.sql.CLOB.DURATION_SESSION);
                    // Open the temporary CLOB in readwrite mode, to enable writing
                    tempClob.open(oracle.sql.CLOB.MODE_READWRITE);
                    // Get the output stream to write
                    java.io.Writer tempClobWriter = tempClob.getCharacterOutputStream();
                    if(data instanceof java.sql.Clob) {
                        java.sql.Clob inClob = (java.sql.Clob) data;
                        java.io.Reader inReader = inClob.getCharacterStream();
                        char[] chs = new char[128];
                        int len = 0;
                        while ((len = inReader.read(chs)) != -1) {
                            tempClobWriter.write(chs, 0, len);
                        }
                    }else if(data instanceof String) {
                       // Write the data into the temporary CLOB
                        tempClobWriter.write((String)data);
                    }else{
                        return data;
                    }
                    // Flush and close the stream
                    tempClobWriter.flush();
                    tempClobWriter.close();
                    // Close the temporary CLOB
                    tempClob.close();
                } catch( java.sql.SQLException sqlexp){
globalMap.put("<%=cid%>_ERROR_MESSAGE",sqlexp.getMessage());
                <%dbLog.logPrintedException("sqlexp.getMessage()");%>
                    tempClob.freeTemporary();
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("<%=cid%>_ERROR_MESSAGE",exp.getMessage());
                <%dbLog.logPrintedException("exp.getMessage()");%>
                    tempClob.freeTemporary();
                    exp.printStackTrace();
                }
                return tempClob;
            }
        }
        ClobTypeUtil_<%=cid%> clobTypeUtil_<%=cid%>=new ClobTypeUtil_<%=cid%>();
    <%
    }

    if(blobTypeExist || isDynamic) {
    %>

        class BlobTypeUtil_<%=cid%> {
            public Object getBLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException {
            	boolean containBlobFromOtherDB = <%=containBlobFromOtherDB%>;
                if(!(data instanceof java.sql.Blob) || (data instanceof oracle.sql.BLOB && !containBlobFromOtherDB)) {
                	return data;
                }

                oracle.sql.BLOB blob = null;
                java.io.InputStream in = null;
                java.io.OutputStream out = null;
                try{
                	//in
                	java.sql.Blob blobData = (java.sql.Blob) data;
                	in = blobData.getBinaryStream();

                	//out
                	blob = oracle.sql.BLOB.createTemporary(conn, true, oracle.sql.BLOB.DURATION_SESSION);
                    blob.open(oracle.sql.BLOB.MODE_READWRITE);
                    //blob = conn.createBlob(); oracle jdbc don't support it
                	out = blob.setBinaryStream(1);

                    byte[] cache = new byte[8192];
                    int len = 0;
                    while ((len = in.read(cache)) != -1) {
                        out.write(cache, 0, len);
                    }

                    return blob;
                } catch(java.sql.SQLException sqlexp){
globalMap.put("<%=cid%>_ERROR_MESSAGE",sqlexp.getMessage());
                <%dbLog.logPrintedException("sqlexp.getMessage()");%>
                	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_<%=cid%>) {
                    		//keep quiet
                    	}
                    }
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("<%=cid%>_ERROR_MESSAGE",exp.getMessage());
                <%dbLog.logPrintedException("exp.getMessage()");%>
                   	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_<%=cid%>) {
                    		//keep quiet
                    	}
                    }
                    exp.printStackTrace();
                } finally {
                	if(out!=null) {
                		try {
                			out.flush();
                    		out.close();
                    	} catch(java.io.IOException e_<%=cid%>) {
                    		//keep quiet
                    	}
                    }

            	 	if(in!=null) {
                		try {
                    		in.close();
                    	} catch(java.io.IOException e_<%=cid%>) {
                    		//keep quiet
                    	}
                    }

                    if(blob!=null) {
                		try {
                    		blob.close();
                    	} catch(java.sql.SQLException e_<%=cid%>) {
                    		//keep quiet
                    	}
                    }
                }

                return null;

            }
<%
if(isDynamic) {
%>
			public void adaptBlobFromOtherDB(routines.system.Dynamic dynamicColumnValue, java.sql.Connection conn) throws java.sql.SQLException {
                int size = dynamicColumnValue.getColumnCount();
               	for(int index = 0; index < size; index++){
                	Object value = dynamicColumnValue.getColumnValue(index);
                	if(value instanceof java.sql.Blob || (value instanceof oracle.sql.BLOB)) {
                		 dynamicColumnValue.setColumnValue(index, getBLOB(value, conn));
	                }
                }
            }
<%
}
%>

        }
        BlobTypeUtil_<%=cid%> blobTypeUtil_<%=cid%>=new BlobTypeUtil_<%=cid%>();
    <%
    }

    if(isDynamic) {
    %>
        java.sql.PreparedStatement pstmt_<%=cid %> =null;
        java.sql.PreparedStatement pstmtInsert_<%=cid %> =null;
        java.sql.PreparedStatement pstmtUpdate_<%=cid %> =null;
        <%if(isEnableDebug) {%>
            StringBuffer query_<%=cid%> = null;
            <%@ include file="../templates/DB/Output/splitSQLForAllDBInDynamicBegin.javajet" %>
        <%
        }
    }
    %>




