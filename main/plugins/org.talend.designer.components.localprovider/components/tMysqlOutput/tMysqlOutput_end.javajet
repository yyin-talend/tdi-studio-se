<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.process.IProcess
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	boolean isAmazonAurora = node.isVirtualGenerateNode() && (cid.matches("^.*?tAmazonAuroraOutput_\\d+_out$") || cid.matches("^.*?tDBOutput_\\d+_out$"));
	
    if(isAmazonAurora){
         cid = cid.substring(0,cid.length()-4);
    }

	dbLog = new DBLogUtil(node);
	IProcess process = node.getProcess();

	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));

    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
    boolean setAutoCommit = false;
    
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));;

	boolean extendedInsert = false;

	boolean supportDuplicateUpdate = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__ON_DUPLICATE_KEY_UPDATE__"));

	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean onErrDie = "true".equals(dieOnError);

	boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));

	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}

	if ("INSERT".equalsIgnoreCase(dataAction)) {
		extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));

        //to fixed: bug8422
        if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
        	extendedInsert = false;
        }

	}else {
		extendedInsert = false;
	}

	String tableName = ElementParameterParser.getValue(node,"__TABLE__");

	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");

	String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

   	String dbVersion = "" ;
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConnection) {
		if(isAmazonAurora){
			  dbVersion = "MYSQL_5";
		}else{
			List<? extends INode> nodes =  process.getNodesOfType("tMysqlConnection");
			for (INode ne:nodes) {
				if (connection.equals(ne.getUniqueName())) {
					dbVersion = ElementParameterParser.getValue(ne, "__DB_VERSION__");
					setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
					break;
				}
			}
		}
	} else {
		dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
	}

	if(extendedInsert){

		if ("MYSQL_4".equals(dbVersion)) {
		    class ExtendInsertOperation{
		        public String generateType(String typeToGenerate){
		            if(("byte[]").equals(typeToGenerate)){
		                typeToGenerate = "Bytes";
		            }else if(("java.util.Date").equals(typeToGenerate)){
		                typeToGenerate = "Date";
		            }else if(("Integer").equals(typeToGenerate)){
		                typeToGenerate = "Int";
		            }else if(("List").equals(typeToGenerate)){
		                typeToGenerate = "Object";
		            }else{
		                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
		            }
		            return typeToGenerate;
		        }

		        public void generateSetStmt(String typeToGenerate,Column column,String cid){
		            boolean isObject = false;
		            String prefix = "pstmt_";
		            %>

		        <%
		        if(("Character").equals(typeToGenerate)) {
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
	                <%
		        }else if(("Date").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
	                <%
		        }else if(("byte[]").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);
	                <%
		        }else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
	                <%
		        }else if(("String").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
	                <%
		        }else if(("Object").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
	                <%
		        }else if(("Boolean").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);
	                <%
		        }else if(("Double").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);
	                <%
		        }else if(("Float").equals(typeToGenerate)){
		            isObject = true;
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT);
	                <%
		        }
	            if(isObject){
	                %>

	                }else{

	                <%
	            }
		        typeToGenerate = generateType(typeToGenerate);

		        if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
		            %>
		        <%
		        if(isObject) {
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>==null){
		        <%
		        } else {
		            %>
		            if(("null").equals(String.valueOf(bufferL<%=cid%>.<%=column.getName()%>).toLowerCase())){
		        <%
		        }
	            %>
	            <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);

		        } else if(bufferL<%=cid%>.<%=column.getName()%> == '\0') {

		            <%=prefix+cid%>.setString(count<%=cid%>,"");

		        } else {

		            <%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getName()%>));
		        }
		        <%
		        }else if(("Date").equals(typeToGenerate)){
		            %>
		            if(bufferL<%=cid%>.<%=column.getName()%>!=null){
		                // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
		                date_<%=cid %> = bufferL<%=cid%>.<%=column.getName()%>.getTime();
		                if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
		                    <%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
		                } else {
		                    <%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
		                }
		            }else{

		                <%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);

		            }
		            <%
		        }else{
		            %>
		            <%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getName()%>);
		            <%
		        }
		        if(isObject){
		            %>

		            }

		        <%
		        }
	        }
	    }
		ExtendInsertOperation eiOperation = new ExtendInsertOperation();
		%>


	    if(rowCount<%=cid%>!=0){

	        StringBuilder extendInsertValueStmt = new StringBuilder();
	        for(int i=0 ; i < rowCount<%=cid%> ; i++){
	             extendInsertValueStmt.append("("+insertColValue<%=cid%>+")");
	             if (i != rowCount<%=cid%> - 1) extendInsertValueStmt.append(",");
	        }


				   insert_<%=cid%> = "INSERT INTO `"+<%=tableName%>+"` ("+insertColName<%=cid%>+") VALUES "+extendInsertValueStmt.toString();
				   <%if (supportDuplicateUpdate) {
				    %>
				    <%
				    List<Map<String, String>> duplicateKeys =
				      			(List<Map<String,String>>)ElementParameterParser.getObjectValue(
				          			node,"__DUPLICATED_KEYS__" );

						if (duplicateKeys.size() > 0) {
						%>
						insert_<%=cid%> += " ON DUPLICATE KEY UPDATE ";
						duplidateClause_<%=cid%> = new StringBuffer("");
						<%
						for (int i=0; i< duplicateKeys.size() ; i++) {
							if (i >0) {
							%>
								duplidateClause_<%=cid%>.append(",");
							<%
							}
							%>
							duplidateClause_<%=cid%>.append ("`" +  <%=duplicateKeys.get(i).get("DUPLICATED_KEY")%> + "`");
							duplidateClause_<%=cid%>.append ("=");
							duplidateClause_<%=cid%>.append (<%=duplicateKeys.get(i).get("DUPLICATED_VALUE")%>);
							<%
						}
						%>
						insert_<%=cid%> += 	duplidateClause_<%=cid%>.toString();
					<%
						}
				     %>
				        <%
				       }%>


	        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);

	        int row2Count<%=cid%> = 0;
<%
		    if(isDynamic) {
%>
	        	int count<%=cid%> = 1;
<%
		    } else {
%>
			    int count<%=cid%> = 0;
<%
		    }
%>

	        for(BufferLine_<%=cid%> bufferL<%=cid%> : exInsertColValueList<%=cid%>){
<%
                if(!isDynamic) {
%>
                    count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()%>+1;
<%
            }
	            for(Column column : stmtStructure) {
	                if(!column.isReplaced() && !column.isAddCol() && column.isInsertable() && !column.isDynamic()) {
	                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	                    eiOperation.generateSetStmt(typeToGenerate, column, cid);
	                    %>
	                    count<%=cid%>++;
	                    <%
	                }
	            }
                if(isDynamic) {
                    Column dynamicColumn = getColumn(getDynamicColumn());
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
                    if("Dynamic".equals(typeToGenerate)) {
                    %>
                        int count_dyn_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, count<%=cid%>-1, "<%=dbmsId%>");
                        count<%=cid%>+=count_dyn_<%=cid%>;
                    <%
                    }
                }
	            %>
	            row2Count<%=cid%>++;
                <%
                if(!useExistingConnection) {
                if(!("").equals(commitEvery)&&!("0").equals(commitEvery)){
                %>
                    commitCounter_<%=cid%> += exInsertColValueList<%=cid%>.size();
                <%
                    }
                }
                %>
	        }
	        try{
	        	int processedCount_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
	        	insertedCount_<%=cid%> += processedCount_<%=cid%>;
	        	rowsToCommitCount_<%=cid%> += processedCount_<%=cid%>;
	        }catch(java.lang.Exception e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
	        	<% if(onErrDie){%>
	       		throw e;
	        	<% }else{
	        		dbLog.logPrintedException("e.getMessage()");
	        	%>
	        		System.err.println(e.getMessage());
	        	<%}%>
	        }
	    }
<%
		} else if ("MYSQL_8".equals(dbVersion) || "MYSQL_5".equals(dbVersion) || "MARIADB".equals(dbVersion)) {
  			//////////batch execute by batch size///////
    		if(!("").equals(numPerInsert ) && !("0").equals(numPerInsert)) {
    		%>
                <%if ((rejectConnName==null) && ("INSERT").equals(dataAction)) {
                %>
                try {
                		if (batchSizeCounter_<%=cid%> != 0) {
							int countSum_<%=cid%> = 0;
							<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
							for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
								countSum_<%=cid%> += (countEach_<%=cid%> == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
							<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
	            	    	<%if (("INSERT").equals(dataAction)) {
	            	    	%>
	            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
	            	    	<%
	            	    	}
	            	    	%>
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
					<%if (("INSERT").equals(dataAction)) {
            	    %>
            	    insertedCount_<%=cid%> += countSum_<%=cid%>;
	    	    	<%
	    	    	}
					dbLog.logPrintedException("e.getMessage()");
					%>
                	System.err.println(e.getMessage());
                	<%
                	}%>
                }
                batchSizeCounter_<%=cid%> = 0;
                <%
                }
                %>
    		<%
    		}
		}
	}

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else {
        %>
	<%if ((rejectConnName==null && ("MYSQL_8".equals(dbVersion) || "MYSQL_5".equals(dbVersion) || "MARIADB".equals(dbVersion)) && useBatchSize) && (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
    %>
    try {
    	if(pstmt_<%=cid %> != null){
			int countSum_<%=cid%> = 0;
			<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
			for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
				countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
			}
			rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
			<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
	    	<%if (("UPDATE").equals(dataAction)) {
	    	%>
	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}else if (("DELETE").equals(dataAction)) {
	    	%>
	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
	    	<%
	    	}%>
	    }
    }catch (java.sql.BatchUpdateException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
    	<%if(("true").equals(dieOnError)) {
    	%>
    		throw(e);
    	<%
    	}else {
    	%>
    	int countSum_<%=cid%> = 0;
		for(int countEach_<%=cid%>: e.getUpdateCounts()) {
			countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
		}
		rowsToCommitCount_<%=cid%> += countSum_<%=cid%>;
		<%if (("UPDATE").equals(dataAction)) {
    	%>
    	updatedCount_<%=cid%> += countSum_<%=cid%>;
    	<%
    	}else if (("DELETE").equals(dataAction)) {
    	%>
    	deletedCount_<%=cid%> += countSum_<%=cid%>;
    	<%
    	}
    	dbLog.logPrintedException("e.getMessage()");%>
    	System.err.println(e.getMessage());
    	<%
    	}%>
	}
    <%
    }%>

        if(pstmt_<%=cid %> != null) {
			<%
			//to fixed: bug8422
			if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %>.close();
				resourceMap.remove("pstmt_<%=cid %>");
			<%
			}else{
			%>
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_<%=cid%>);
				resourceMap.remove("keyPsmt_<%=cid%>");
			<%
			}
			%>
        }
        <%
    }
    %>
    resourceMap.put("statementClosed_<%=cid%>", true);
    <%
    if(!useExistingConnection){
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
    		%>
    	if (commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
    		<%dbLog.commit().commitTry(null, dbLog.var("rowsToCommitCount"));%>
    	}
    	conn_<%=cid%>.commit();
    	if (commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
    		<%dbLog.commit().commitDone(null);%>
			rowsToCommitCount_<%=cid%> = 0;
    	}
		commitCounter_<%=cid%> = 0;
    	<%
		}

		commitEvery = "0";
    	%>
		<%dbLog.conn().closeTry(null);%>
    	conn_<%=cid%> .close();
    	<%dbLog.conn().closeDone(null);%>
    	resourceMap.put("finish_<%=cid%>", true);
    	<%
	}
%>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
