<%@ jet 
  imports="
	org.talend.core.model.process.INode 
	org.talend.core.model.process.ElementParameterParser
	org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.Map
	org.talend.core.model.process.IElementParameter
	org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();  
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String ftpsPort = ElementParameterParser.getValue(node, "__FTPS_PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
boolean dirFull = ("true").equals(ElementParameterParser.getValue(node, "__DIR_FULL__"));
String cid = node.getUniqueName();
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");

boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");  
List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean sftp = false;
boolean ftps = false;
String protectionLevel = ElementParameterParser.getValue(node, "__FTPS_PROT__");
String protectionBufferSize = ElementParameterParser.getValue(node, "__FTPS_PROTECTION_BUFF_SIZE__");
String timeoutValue = ElementParameterParser.getValue(node, "__CONNECTION_TIMEOUT__");
boolean useRemoteVerification = ("true").equals(ElementParameterParser.getValue(node, "__REMOTE_VERIFICATION__"));
boolean useStrictReplyParsing = ("true").equals(ElementParameterParser.getValue(node, "__USE_STRICT_REPLY_PARSING__"));
boolean isConfigClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));
List<Map<String, String>> clientParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CLIENT_PARAMETERS__");

if (("true").equals(useExistingConn)) {
  List< ? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
	if (n.getUniqueName().equals(connection)) {
	  sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
	  ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__"));
	}
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
%>
  int connectionTimeout_<%=cid %> = Integer.valueOf(<%=timeoutValue %>);
<%
}
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

%>
	java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();

<%
if (files.size() == 0) {
%>
	maskList_<%=cid %>.add("*");
<%
} else {
  for (int i = 0; i < files.size(); i++) {
	Map<String, String> line = files.get(i);
	%> 
		maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>); 
  <%
  }
}

//The following part support the socks proxy for FTP, FTPS and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy && !("true").equals(useExistingConn)) {
%>
	java.util.Properties props_<%=cid%> = System.getProperties();
	props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
	props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
	props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
	
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
	String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
 	String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

	props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);
	java.net.Authenticator.setDefault(new java.net.Authenticator() {
		public java.net.PasswordAuthentication getPasswordAuthentication() {
			return new java.net.PasswordAuthentication(<%=proxyUser %>, decryptedProxyPassword_<%=cid%>.toCharArray());
		}
	});
<%
}

if (sftp) {// *** sftp *** //

	if (("false").equals(useExistingConn)) {
			final String passwordFieldKey = "__PASSWORD__";
	%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/sftp_connect.javajet"%>
		
		<%if(use_encoding) {%>
			c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
		<%}%>

  <%
	} else {
  %>	
		com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Use an existing connection. Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
		if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
	  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
	  	}
  <%
	}
  %>
	String remotedir_<%=cid %> = <%=remotedir %>.replaceAll("\\\\", "/");
	java.util.Vector<com.jcraft.jsch.ChannelSftp.LsEntry> vector_<%=cid %> = c_<%=cid%>.ls(remotedir_<%=cid %>);
	com.jcraft.jsch.ChannelSftp.LsEntry[] sftpFiles_<%=cid %> = vector_<%=cid %>.toArray(new com.jcraft.jsch.ChannelSftp.LsEntry[0]);
	int nb_file_<%=cid%> = 0;  
	List<String> fileListTemp_<%=cid %> = new java.util.ArrayList<String>();
<%
	if (dirFull) {
%>
		List<String> fullFileInfoList_<%=cid %> = new java.util.ArrayList<String>();
<%
	}
%>

	for (String filemask_<%=cid %> : maskList_<%=cid %>) {
		java.util.regex.Pattern fileNamePattern_<%=cid %> = java.util.regex.Pattern.compile(filemask_<%=cid %>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
	
		for (com.jcraft.jsch.ChannelSftp.LsEntry filemaskTemp_<%=cid %> : sftpFiles_<%=cid %>) {
			String fileName_<%=cid %> = filemaskTemp_<%=cid %>.getFilename();
			if ((".").equals(fileName_<%=cid %>) || ("..").equals(fileName_<%=cid %>)) {
				continue;
			}
			if (fileNamePattern_<%=cid %>.matcher(fileName_<%=cid %>).matches()) {
<%
				if (dirFull) {
%>
					fullFileInfoList_<%=cid %>.add(filemaskTemp_<%=cid %>.getLongname());
<%
				}
%>
				fileListTemp_<%=cid %>.add(fileName_<%=cid %>);
			}
		}
	}

	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Listing files from server.");
	<%}%>
	for (int counter_<%=cid %> = 0; counter_<%=cid %> < fileListTemp_<%=cid %>.size(); counter_<%=cid %>++) {
		String currentFileName_<%=cid%> = fileListTemp_<%=cid %>.get(counter_<%=cid %>);
		String currentFilePath_<%=cid%> = remotedir_<%=cid %>;
		if(!remotedir_<%=cid%>.endsWith("/")&&!remotedir_<%=cid%>.endsWith("\\")){
			currentFilePath_<%=cid%> += "/";
		}
		currentFilePath_<%=cid%> += currentFileName_<%=cid%>;
		<%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - List file : '" + currentFilePath_<%=cid%> + "' .");
		<%}
		if (dirFull) {
%>
			globalMap.put("<%=cid %>_CURRENT_FILE", fullFileInfoList_<%=cid %>.get(counter_<%=cid %>));
<%
		} else {
%>
			globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
<%
		}
%>
		globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%>);
		nb_file_<%=cid%>++;
<%
} else {
    if (ftps) { // *** ftps *** //
%>
        org.apache.commons.net.ftp.FTPSClient ftp_<%=cid %> = null;
<%
        if (("false").equals(useExistingConn)) {
            String keystoreFile = ElementParameterParser.getValue(node, "__KEYSTORE_FILE__");
            String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
%>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftps_connect.javajet"%>
<%
        } else {
%>
            ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPSClient) globalMap.get("<%=conn %>");
<%
        }
    } else { // *** ftp
%>
        org.apache.commons.net.ftp.FTPClient ftp_<%=cid %> = null;
<%
        if (("true").equals(useExistingConn)) {%>
            ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPClient) globalMap.get("<%=conn %>");
            <%if(isLog4jEnabled){%>
                if(ftp_<%=cid %>!=null) {
                    log.info("<%=cid%> - Use an existing connection. Connection hostname: " +  ftp_<%=cid %>.getRemoteAddress().toString() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + ".");
                }
            <%}%>
<%
        } else {
            passwordFieldName = "__PASSWORD__";
%>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftp_connect.javajet"%>
<%
        }
    } //common code for ftp and ftps:
%> 
    int nb_file_<%=cid%> = 0;
    org.apache.commons.net.ftp.FTPFile[] ftpFiles_<%=cid %> = null;
    String rootDir_<%=cid %> = ftp_<%=cid %>.printWorkingDirectory();
    List<org.apache.commons.net.ftp.FTPFile> fileListTemp_<%=cid %> = new java.util.ArrayList<>();

    <%/*read files*/ %>
    String remotedir_<%=cid %> = (<%=remotedir%>).replaceAll("\\\\","/");
    boolean cwdSuccess_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(remotedir_<%=cid %>);

    if (!cwdSuccess_<%=cid %>) {
        throw new RuntimeException("Failed to change remote directory. " + ftp_<%=cid %>.getReplyString());
    }

    ftpFiles_<%=cid %> = ftp_<%=cid %>.listFiles();
	<%if(!dirFull){%>
	String[] nameLists_<%=cid %> = ftp_<%=cid %>.listNames();
	List<String> nameListsTemp_<%=cid %> = new java.util.ArrayList<>();
	<%}%>
	


<%
    if ("true".equals(useExistingConn) && !moveToCurrentDir) {
%>
    <%/*return to previous dir */%>
    ftp_<%=cid %>.changeWorkingDirectory(rootDir_<%=cid %>);
<%
    }
%>
    <%/*prepare masks*/ %>
    for (String filemask_<%=cid %> : maskList_<%=cid %>) {
        java.util.regex.Pattern fileNamePattern_<%=cid %> = java.util.regex.Pattern.compile(filemask_<%=cid %>.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
	
<%if(!dirFull){%>
        if(nameLists_<%=cid %> != null){
            for (String ftpFile_<%=cid %> : nameLists_<%=cid %>) {
                if (fileNamePattern_<%=cid %>.matcher(ftpFile_<%=cid %>).matches()) {
                    nameListsTemp_<%=cid %>.add(ftpFile_<%=cid %>);
                }
            }
        }
<%}else{%>
        for (org.apache.commons.net.ftp.FTPFile ftpFile_<%=cid %> : ftpFiles_<%=cid %>) {
		String ftpFileName_<%=cid %> = ftpFile_<%=cid %>.getName();
            if (ftpFileName_<%=cid %>!=null && fileNamePattern_<%=cid %>.matcher(ftpFileName_<%=cid %>).matches()) {
                fileListTemp_<%=cid %>.add(ftpFile_<%=cid %>);
            }
        }
		<%}%>
    }

    String currentFilePath_<%=cid%> = remotedir_<%=cid %>;
    if(!remotedir_<%=cid%>.endsWith("/")&&!remotedir_<%=cid%>.endsWith("\\")){
        currentFilePath_<%=cid%> += "/";
    }
<%if(!dirFull){%>
    for (String ftpFile_<%=cid %> : nameListsTemp_<%=cid %>) {
        String currentFileName_<%=cid%> = ftpFile_<%=cid %>;

<%}else{%>

    for (org.apache.commons.net.ftp.FTPFile ftpFile_<%=cid %> : fileListTemp_<%=cid %>) {
        String currentFileName_<%=cid%> = null;
            currentFileName_<%=cid%> = ftpFile_<%=cid %>.toString();
<%
}

        if(isLog4jEnabled) {
%>
            log.debug("<%=cid%> - List file : '" + currentFilePath_<%=cid%> + "' .");
<%
        }
%> 
        <%/*set to globalMap*/ %>
        globalMap.put("<%=cid %>_CURRENT_FILE", currentFileName_<%=cid%>);
		<%if(!dirFull){%>
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%> + currentFileName_<%=cid%>);

<%}else{%>
        globalMap.put("<%=cid %>_CURRENT_FILEPATH", currentFilePath_<%=cid%> + ftpFile_<%=cid %>.getName());
		<%}%>
        nb_file_<%=cid %>++;

<%
} //end common code part
%>