<%@ jet
%>
<%
//issue 0010346 Parallelization crash with "Drop table if exists and create"
Boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
String dbms=ElementParameterParser.getValue(node, "__MAPPING__");
boolean convertToUppercase_tableAction = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
boolean convertToLowercase_tableAction = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_LOWERCASE__"));
if (!isParallelize) {
//end issue 0010346 Parallelization crash with "Drop table if exists and create"

    manager = getManager(dbmsId, cid);
    
    String ending="";

    boolean useCascade = "true".equals(ElementParameterParser.getValue(node,"__USE_CASCADE__"));

    //bugfix: TDI-31650
    boolean setQueryTimeOut_tableAction = false;
    String queryTimeOutInSeconds_tableAction = null;
    if(AS400.equalsIgnoreCase(dbmsId) || MSSQL.equalsIgnoreCase(dbmsId) || SYBASE.equalsIgnoreCase(dbmsId)){
        setQueryTimeOut_tableAction = "true".equals(ElementParameterParser.getValue(node,"__SET_QUERY_TIMEOUT__"));
        queryTimeOutInSeconds_tableAction = ElementParameterParser.getValue(node,"__QUERY_TIMEOUT_IN_SECONDS__");
    }
    
    if(!("NONE").equals(tableAction)) {
        if(("DROP_CREATE").equals(tableAction)) {
        %>
            try (java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtDrop_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
            <%dbLog.table().dropTry(dbLog.varForTableName("tableName", dbmsId));%>
                stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>" <%=(useCascade ? " + \" cascade\"" : "")%>);
            <%dbLog.table().dropDone(dbLog.varForTableName("tableName", dbmsId));%>
            }
            <%
                if (TERADATA.equalsIgnoreCase(dbmsId)) {
            %>
                 conn_<%=cid%>.commit();
            <%
                }
            %>
            try (java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtCreate_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
            <%dbLog.table().createTry(dbLog.varForTableName("tableName", dbmsId));%>
            <%
                if(isDynamic) {
                List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                    if(conns_dynamic!=null && conns_dynamic.size()>0){
                        String query=manager.getCreateTableSQL(stmtStructure);
                    %>
                    	routines.system.Dynamic dynamic_<%=cid%> = <%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>;
	                    if (<%=convertToLowercase_tableAction%>) {
	                        for (int x_<%=cid%> = 0; x_<%=cid%> < dynamic_<%=cid%>.getColumnCount(); x_<%=cid%>++) {
	                        	routines.system.DynamicMetadata column_<%=cid%> = dynamic_<%=cid%>.getColumnMetadata(x_<%=cid%>);
	                        	column_<%=cid%>.setName(column_<%=cid%>.getName().toLowerCase());
	                        }
	                    }
                        stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(dynamic_<%=cid%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                    <%
                    }
                } else {
            %>
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
            <%
            }
            %>
            <%dbLog.table().createDone(dbLog.varForTableName("tableName", dbmsId));%>
            }
        <%
        } else if(("CREATE").equals(tableAction)) {
        %>
            try (java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtCreate_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
            <%dbLog.table().createTry(dbLog.varForTableName("tableName", dbmsId));%>
            <%
            if(isDynamic) {
                List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
                if(conns_dynamic!=null && conns_dynamic.size()>0){
                    String query=manager.getCreateTableSQL(stmtStructure);
                    %>
                    routines.system.Dynamic dynamic_<%=cid%> = <%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>;
                    if (<%=convertToLowercase_tableAction%>) {
                        for (int x_<%=cid%> = 0; x_<%=cid%> < dynamic_<%=cid%>.getColumnCount(); x_<%=cid%>++) {
                        	routines.system.DynamicMetadata column_<%=cid%> = dynamic_<%=cid%>.getColumnMetadata(x_<%=cid%>);
                        	column_<%=cid%>.setName(column_<%=cid%>.getName().toLowerCase());
                        }
                    }
                    stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(dynamic_<%=cid%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                <%
                }
            } else {
            %>
                stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
            <%
            }
            %>
            <%dbLog.table().createDone(dbLog.varForTableName("tableName", dbmsId));%>
            }
        <%
        } else if(("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction)) {
            boolean tableNameCaseSensitive=false;
            if(DB2.equalsIgnoreCase(dbmsId)||POSTGRESQL.equalsIgnoreCase(dbmsId)||GREENPLUM.equalsIgnoreCase(dbmsId)||POSTGREPLUS.equalsIgnoreCase(dbmsId)){
                tableNameCaseSensitive=true;
            }
            %>
            <%
            //to fixed: bug8422
            if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
            %>

                <%//bug22719: informix use independent connection, should remove this code after use shared connection
                if(INFORMIX.equalsIgnoreCase(dbmsId)){
                    String dbnameKey = ElementParameterParser.getValue(node, "__DBNAME__");
                    String dbserverKey = ElementParameterParser.getValue(node, "__DBSERVER__");
                    String dbhostKey = ElementParameterParser.getValue(node, "__HOST__");
                    String dbportKey = ElementParameterParser.getValue(node, "__PORT__");
                    String tableSchemaKey = ElementParameterParser.getValue(node,"__SCHEMA_DB__");
                    %>
                    String keyCheckTable_<%=cid %> = "[Informix]"+"["+<%=dbhostKey%>+"]["+<%=dbportKey%>+"]["+<%=dbnameKey%>+"]["+<%=dbserverKey%>+"]["+<%=tableSchemaKey%>+"]"+ "[checktable]" + "[" + <%=table%> + "]";
                <%}else{%>
                    // [%connection%][checktable][tableName]
                    String keyCheckTable_<%=cid %> = conn_<%=cid%> + "[checktable]" + "[" + <%=table%> + "]";
                <%}%>

                if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_<%=cid %>)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}
            <%
            }
            %>
                            <%
                            /*
                            case multi connection access the same db, that maybe have a locked in System table(e.g mssql).
                            so in mssql use "Select" checked the table whether exist.
                            */
                            //TODO we will use like "select" sql intead of use system table to checked table?
                            if(MSSQL.equalsIgnoreCase(dbmsId)) {
                            %>
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.Statement isExistStmt_<%=cid%> = conn_<%=cid%>.createStatement()) {
                                    try {
                                    	<%
                                        if(setQueryTimeOut_tableAction){
                                        %>
                                             isExistStmt_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                                        <%
                                        }
                                    	%>
                                        isExistStmt_<%=cid%>.execute("SELECT TOP 1 1 FROM [" + tableName_<%=cid%> + "]" );
                                        whetherExist_<%=cid%> = true;
                                    } catch (java.lang.Exception e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_<%=cid%> = false;
                                    }
                                }
                            <%
                            } else if (ORACLE.equalsIgnoreCase(dbmsId) || SAPHANA.equalsIgnoreCase(dbmsId)) {
                            %>
                                <%=manager.generateCode4TabelExist()%>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                if(tableNameForSearch_<%=cid%>.indexOf("\"")==-1){
                                    tableNameForSearch_<%=cid%> = tableNameForSearch_<%=cid%>.toUpperCase();
                                }else{
                                    tableNameForSearch_<%=cid%> = tableNameForSearch_<%=cid%>.replaceAll("\"","");
                                }
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, dbschemaForSearch_<%=cid%>, tableNameForSearch_<%=cid%>, new String[]{"TABLE"})) {
                                    if(rsTable_<%=cid%>.next()) {
                                        whetherExist_<%=cid%> = true;
                                    }
                                }

                            <%
                            } else if ( SYBASE.equalsIgnoreCase(dbmsId)
                                        || INFORMIX.equalsIgnoreCase(dbmsId) ) {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_<%=cid%>.next()) {
                                        String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                        String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                        if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(<%=table%>)
                                            && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || dbschema_<%=cid%>.trim().length() ==0)) {
                                            whetherExist_<%=cid%> = true;
                                            break;
                                        }
                                    }
                                }
                            <%
                            } else if( DB2.equalsIgnoreCase(dbmsId) || TERADATA.equalsIgnoreCase(dbmsId)){
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_<%=cid%>.next()) {
                                        String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                        String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                        if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>((<%=table%>)<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)
                                            && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || (dbschema_<%=cid%>.trim().length() ==0 && dbUser_<%=cid%>.equalsIgnoreCase(schema_<%=cid%>)))) {
                                            whetherExist_<%=cid%> = true;
                                            break;
                                        }
                                    }
                                }
                            <%
                            } else if (GREENPLUM.equalsIgnoreCase(dbmsId) || POSTGRESQL.equalsIgnoreCase(dbmsId) || POSTGREPLUS.equalsIgnoreCase(dbmsId) || VERTICA.equalsIgnoreCase(dbmsId)) {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_<%=cid%> = "public";
                                    if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_<%=cid%> = conn_<%=cid%>.createStatement();
                                            java.sql.ResultSet rsSchema_<%=cid%> = stmtSchema_<%=cid%>.executeQuery("select current_schema() ")) {
                                            while(rsSchema_<%=cid%>.next()){
                                                defaultSchema_<%=cid%> = rsSchema_<%=cid%>.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_<%=cid%>.next()) {
                                        String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                        String schema_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_SCHEM");
                                        if(table_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>((<%=table%>)<%if(convertToLowercase_tableAction){%>.toLowerCase()<%}%>)
                                            && (schema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(dbschema_<%=cid%>) || ((dbschema_<%=cid%> ==null || dbschema_<%=cid%>.trim().length() ==0) && defaultSchema_<%=cid%>.equals<%if(!tableNameCaseSensitive){%>IgnoreCase<%}%>(schema_<%=cid%>)))) {
                                            whetherExist_<%=cid%> = true;
                                            break;
                                        }
                                    }
                                }
                            <%
                            } else if(EXASOL.equalsIgnoreCase(dbmsId)) {
                            %>
                                String tableForSearch_<%=cid%> = <%=table%>;
                                if(tableForSearch_<%=cid%> != null){
                                    if(tableForSearch_<%=cid%>.startsWith("\"") && tableForSearch_<%=cid%>.endsWith("\"")){
                                        tableForSearch_<%=cid%> =  tableForSearch_<%=cid%>.substring(1,tableForSearch_<%=cid%>.length()-1);
                                    }else{
                                        tableForSearch_<%=cid%> =  tableForSearch_<%=cid%>.toUpperCase();
                                    }
                                }
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, conn_<%=cid%>.getSchema(), tableForSearch_<%=cid%>, new String[]{"TABLE"})) {
                                       if(rsTable_<%=cid%>.next()) {
                                        whetherExist_<%=cid%> = true;
                                    }
                                }
                            <%
                            } else if(REDSHIFT.equalsIgnoreCase(dbmsId)) {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, schemaForSearch_<%=cid%>, null, new String[]{"TABLE"})) {
                                    while(rsTable_<%=cid%>.next()) {
                                        if(rsTable_<%=cid%>.getString("TABLE_NAME").equalsIgnoreCase(tableForSearch_<%=cid%>)) {
                                            whetherExist_<%=cid%> = true;
                                            break;
                                        }
                                    }
                                }
                            
                            
                            <%
                            } else if(MYSQL.equalsIgnoreCase(dbmsId) || SINGLESTORE.equalsIgnoreCase(dbmsId)) {
                                boolean useExistMySQLConn = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
                                String dbnameMySQL = null;
                                if (useExistMySQLConn) {
                                    List< ? extends INode> nodes =  node.getProcess().getNodesOfType("tMysqlConnection");
                                    String connectionMySQL = ElementParameterParser.getValue(node,"__CONNECTION__");
                                    for (INode ne : nodes) {
                                        if (connectionMySQL.equals(ne.getUniqueName())) {
                                            dbnameMySQL = ElementParameterParser.getValue(ne, "__DBNAME__");
                                            break;
                                        }
                                    }
                                } else {
                                    dbnameMySQL = ElementParameterParser.getValue(node, "__DBNAME__");
                                }
                                dbnameMySQL = ("".equals(dbnameMySQL)) ? null : dbnameMySQL;
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                <%if (dbnameMySQL != null) {%>
                                    java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(<%=dbnameMySQL%>, null, null, new String[]{"TABLE"});
                                <%} else {%>
                                    java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(conn_<%=cid%>.getCatalog(), null, null, new String[]{"TABLE"});
                                <%}%>
                                boolean whetherExist_<%=cid%> = false;
                                while(rsTable_<%=cid%>.next()) {
                                    String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                    if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                                        whetherExist_<%=cid%> = true;
                                        break;
                                    }
                                }
                            <%
                            } else {
                            %>
                                java.sql.DatabaseMetaData dbMetaData_<%=cid%> = conn_<%=cid%>.getMetaData();
                                boolean whetherExist_<%=cid%> = false;
                                try (java.sql.ResultSet rsTable_<%=cid%> = dbMetaData_<%=cid%>.getTables(null, null, null, new String[]{"TABLE"})) {
                                    while(rsTable_<%=cid%>.next()) {
                                        String table_<%=cid%> = rsTable_<%=cid%>.getString("TABLE_NAME");
                                        if(table_<%=cid%>.equalsIgnoreCase(<%=table%>)) {
                                            whetherExist_<%=cid%> = true;
                                            break;
                                        }
                                    }
                                }
                            <%
                            }
                            %>
                            <%
                            if(("CREATE_IF_NOT_EXISTS").equals(tableAction)) {
                            %>
                                if(!whetherExist_<%=cid%>) {
                                    try (java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement()) {
                                    <%
                                       if(setQueryTimeOut_tableAction){
                                            %>
                                                      stmtCreate_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                                            <%
                                       }
                                     %>
                                    <%dbLog.table().createTry(dbLog.varForTableName("tableName", dbmsId));%>
                                    <%
                                    if(isDynamic) {
                                        List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                                        if(conns_dynamic!=null && conns_dynamic.size()>0){
                                            String query=manager.getCreateTableSQL(stmtStructure);
                                            %>
                                            routines.system.Dynamic dynamic_<%=cid%> = <%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>;
						                    if (<%=convertToLowercase_tableAction%>) {
						                        for (int x_<%=cid%> = 0; x_<%=cid%> < dynamic_<%=cid%>.getColumnCount(); x_<%=cid%>++) {
						                        	routines.system.DynamicMetadata column_<%=cid%> = dynamic_<%=cid%>.getColumnMetadata(x_<%=cid%>);
						                        	column_<%=cid%>.setName(column_<%=cid%>.getName().toLowerCase());
						                        }
						                    }
                                            stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(dynamic_<%=cid%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                                        <%
                                        }
                                    } else {
                                    %>
                                        stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
                                    <%
                                    }
                                    %>
                                    <%dbLog.table().createDone(dbLog.varForTableName("tableName", dbmsId));%>
                                    }
                                }
                            <%
                            } else {
                            %>
                                if(whetherExist_<%=cid%>) {
                                    try (java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement()) {
                                        <%
                                           if(setQueryTimeOut_tableAction){
                                                %>
                                                      stmtDrop_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                                                <%
                                           }
                                     %>
                                        <%dbLog.table().dropTry(dbLog.varForTableName("tableName", dbmsId));%>
                                        stmtDrop_<%=cid%>.execute("<%=manager.getDropTableSQL()%>" <%=(useCascade ? " + \" cascade\"" : "")%>);
                                        <%dbLog.table().dropDone(dbLog.varForTableName("tableName", dbmsId));%>
                                    }
                                    <%
                                        if (TERADATA.equalsIgnoreCase(dbmsId)) {
                                    %>
                                            conn_<%=cid%>.commit();
                                    <%
                                        }
                                    %>
                                }
                                try(java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement()) {
                                <%
                                       if(setQueryTimeOut_tableAction){
                                        %>
                                                  stmtCreate_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                                        <%
                                   }
                                 %>
                                <%dbLog.table().createTry(dbLog.varForTableName("tableName", dbmsId));%>
                                <%
                                if(isDynamic) {
                                    List<? extends IConnection> conns_dynamic = node.getIncomingConnections();
                                    if(conns_dynamic!=null && conns_dynamic.size()>0){
		                                String query=manager.getCreateTableSQL(stmtStructure);
                                        %>
		                                routines.system.Dynamic dynamic_<%=cid%> = <%=conns_dynamic.get(0).getName()%>.<%=getDynamicColumn()%>;
					                    if (<%=convertToLowercase_tableAction%>) {
					                        for (int x_<%=cid%> = 0; x_<%=cid%> < dynamic_<%=cid%>.getColumnCount(); x_<%=cid%>++) {
					                        	routines.system.DynamicMetadata column_<%=cid%> = dynamic_<%=cid%>.getColumnMetadata(x_<%=cid%>);
					                        	column_<%=cid%>.setName(column_<%=cid%>.getName().toLowerCase());
					                        }
					                    }
                                        stmtCreate_<%=cid%>.execute((("<%=query%>").replace("{TALEND_DYNAMIC_COLUMN}",DynamicUtils.getCreateTableSQL(dynamic_<%=cid%>, "<%=dbms==null?"":dbms.toLowerCase()%>")<%if(convertToUppercase_tableAction){%>.toUpperCase()<%}%>)+")<%=ending%>"));
                                    <%
                                    }
                                } else {
                                %>
                                    stmtCreate_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)");
                                <%
                                }
                                %>
                                <%dbLog.table().createDone(dbLog.varForTableName("tableName", dbmsId));%>
                                }
                            <%
                            }
                            %>
            <%
            //to fixed: bug8422
            if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
            %>
                            GlobalResource.resourceMap.put(keyCheckTable_<%=cid %>, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
            <%
            }
            %>
        <%
        } else if(("CLEAR").equals(tableAction)) {
        %>
            try (java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtClear_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
            <%dbLog.table().clearTry(dbLog.varForTableName("tableName", dbmsId));%>
                stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
            <%dbLog.table().clearDone(dbLog.varForTableName("tableName", dbmsId));%>
            }
        <%
        }else if(("TRUNCATE").equals(tableAction)) {
        %>
            int rsTruncCountNumber_<%=cid%> = 0;
            try(java.sql.Statement stmtTruncCount_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtTruncCount_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
                try (java.sql.ResultSet rsTruncCount_<%=cid%> = stmtTruncCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>")) {
                    if(rsTruncCount_<%=cid%>.next()) {
                        rsTruncCountNumber_<%=cid%> = rsTruncCount_<%=cid%>.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%
               if(setQueryTimeOut_tableAction){
                    %>
                              stmtTrunc_<%=cid%>.setQueryTimeout(<%= queryTimeOutInSeconds_tableAction %>);
                    <%
               }
             %>
            <%dbLog.table().truncateTry(dbLog.varForTableName("tableName", dbmsId));%>
            <%if(DB2.equalsIgnoreCase(dbmsId)){%>
                conn_<%=cid%>.commit();
            <%}%>
                stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");
            <%if(INFORMIX.equalsIgnoreCase(dbmsId)){%>
                    if(!conn_<%= cid %>.getAutoCommit()){
                        conn_<%=cid%>.commit();
                    }
            <%}%>
            <%dbLog.table().truncateDone(dbLog.varForTableName("tableName", dbmsId));%>
                deletedCount_<%=cid%> += rsTruncCountNumber_<%=cid%>;
            }
        <%
        } else if(("TRUNCATE_REUSE_STORAGE").equals(tableAction)) {
        %>
            try (java.sql.Statement stmtTruncCount_<%=cid%> = conn_<%=cid%>.createStatement();
                java.sql.ResultSet rsTruncCount_<%=cid%> = stmtTruncCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
                java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement()) {
            <%dbLog.table().truncateReuseStorageTry(dbLog.varForTableName("tableName", dbmsId));%>
            <%if(DB2.equalsIgnoreCase(dbmsId)){%>
                conn_<%=cid%>.commit();
            <%}%>
                stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateReuseStroageTableSQL()%>");
            <%dbLog.table().truncateReuseStorageDone(dbLog.varForTableName("tableName", dbmsId));%>
                while(rsTruncCount_<%=cid%>.next()) {
                    deletedCount_<%=cid%> += rsTruncCount_<%=cid%>.getInt(1);
                }
            }
        <%
        }
    }
//issue 0010346 Parallelization crash with "Drop table if exists and create"
}
//end issue 0010346 Parallelization crash with "Drop table if exists and create"
%>
