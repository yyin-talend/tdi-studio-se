<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IProcess
	java.util.List
"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	IProcess process = node.getProcess();
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	boolean setAutoCommit = false;

	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    String dieOnError = ElementParameterParser.getValue(node,"__DIE_ON_ERROR__");

    boolean useBatch = "true".equals(ElementParameterParser.getValue(node, "__USE_BATCH__"));

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    if(useExistingConnection) {
        List<? extends INode> nodes = process.getNodesOfType("tIngresConnection");
        for (INode ne:nodes) {
            if (connection.equals(ne.getUniqueName())) {
                setAutoCommit = "true".equals(ElementParameterParser.getValue(ne, "__AUTO_COMMIT__"));
                break;
            }
        }
    }

    useBatch = (rejectConnName == null)
             && (
                  ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                )
             && useBatch;

	if(!useExistingConnection) {
	    if(!("").equals(commitEvery)&&!("0").equals(commitEvery)){
	        %>
	    if (commitCounter_<%=cid%> > 0) {
	        <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
	        conn_<%=cid%>.commit();
	        <%dbLog.commit().commitDone(null);%>
	    }
	        <%
	    }
	}

    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else {
        %>

        <%
           if(useBatch){
        %>
                int[] status_<%=cid%> = null;
                int countSum_<%=cid%> = 0;
                try {
                    if(pstmt_<%=cid %>!=null && batchSizeCounter_<%=cid%> > 0 ){
                        <%dbLog.batch().executeTry(dbLog.str(dataAction));%>
                        status_<%=cid%> = pstmt_<%=cid %>.executeBatch();
                        <%dbLog.batch().executeDone(dbLog.str(dataAction));%>
                        for(int countEach_<%=cid%>: status_<%=cid%>) {
                            countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                        }
                    }
                }catch (java.sql.BatchUpdateException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                    <%
                    if(("true").equals(dieOnError)) {
                    %>
                        throw(e);
                    <%
                    }else {
                    dbLog.logPrintedException("e.getMessage()");
                    %>
                    for(int countEach_<%=cid%>: e.getUpdateCounts()) {
                        countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                    }
                    System.err.println(e.getMessage());
                    <%
                    }
                    %>
                }
                if(pstmt_<%=cid %>!=null && batchSizeCounter_<%=cid%> > 0 ){
                    try {
                        tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                    }catch (java.sql.SQLException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());

                    }
                    tmp_batchUpdateCount_<%=cid%> = tmp_batchUpdateCount_<%=cid%> > countSum_<%=cid%> ? tmp_batchUpdateCount_<%=cid%> : countSum_<%=cid%>;
                    rowsToCommitCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                    <%if (("INSERT").equals(dataAction)) {
                    %>
                        insertedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                    <%
                    }else if (("UPDATE").equals(dataAction)) {
                    %>
                        updatedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                    <%
                    }else if (("DELETE").equals(dataAction)) {
                    %>
                        deletedCount_<%=cid%> += tmp_batchUpdateCount_<%=cid%>;
                    <%
                    }
                    %>
                }
<%
    if(!useExistingConnection) {
        if(!("").equals(commitEvery)&&!("0").equals(commitEvery)){
            %>
        if (commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
            <%dbLog.commit().commitTry(null, dbLog.var("rowsToCommitCount"));%>
        }
        conn_<%=cid%>.commit();
        if (commitCounter_<%=cid%> > 0 && rowsToCommitCount_<%=cid%> != 0) {
            <%dbLog.commit().commitDone(null);%>
            rowsToCommitCount_<%=cid%> = 0;
        }
        commitCounter_<%=cid%> = 0;
        <%
        }
      }
    }
%>
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    }
    %>
    resourceMap.put("statementClosed_<%=cid%>", true);
<%
	if(!useExistingConnection) {
%>
	<%dbLog.conn().closeTry(null);%>
    conn_<%=cid%> .close();
    <%dbLog.conn().closeDone(null);%>
    resourceMap.put("finish_<%=cid%>", true);
<%
	}
%>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
