<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String ftpsPort = ElementParameterParser.getValue(node, "__FTPS_PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String overwrite = ElementParameterParser.getValue(node, "__OVERWRITE__");
String sftpoverwrite =ElementParameterParser.getValue(node, "__SFTPOVERWRITE__");
String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");  
String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");

List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");

String keystoreFile = ElementParameterParser.getValue(node,"__KEYSTORE_FILE__");

boolean append = "true".equals(ElementParameterParser.getValue(node, "__APPEND__"));
String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean bPrintMsg = "true".equals(ElementParameterParser.getValue(node, "__PRINT_MESSAGE__"));
String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
boolean sftp = false;
boolean ftps = false;
String protectionLevel = ElementParameterParser.getValue(node, "__FTPS_PROT__");
String protectionBufferSize = ElementParameterParser.getValue(node, "__FTPS_PROTECTION_BUFF_SIZE__");
String timeoutValue = ElementParameterParser.getValue(node, "__CONNECTION_TIMEOUT__");
boolean useRemoteVerification = ("true").equals(ElementParameterParser.getValue(node, "__REMOTE_VERIFICATION__"));
boolean useStrictReplyParsing = ("true").equals(ElementParameterParser.getValue(node, "__USE_STRICT_REPLY_PARSING__"));

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

boolean isConfigClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));
List<Map<String, String>> clientParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CLIENT_PARAMETERS__");
String passwordFieldName = "";

if ("true".equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for(INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
      ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__"));
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
%>
  int connectionTimeout_<%=cid %> = Integer.valueOf(<%=timeoutValue %>);
<%
}
%>
int nb_file_<%=cid%> = 0;
<%
//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.

if (useProxy && !("true").equals(useExistingConn)){
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);
  java.net.Authenticator.setDefault(new java.net.Authenticator() {
        public java.net.PasswordAuthentication getPasswordAuthentication() {
            return new java.net.PasswordAuthentication(<%=proxyUser %>, decryptedProxyPassword_<%=cid%>.toCharArray());
        }
  });
<%
} 

if (sftp) { // *** sftp *** //
%>  
	final java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();

			class MyProgressMonitor_<%=cid%> implements com.jcraft.jsch.SftpProgressMonitor {

				private long percent = -1;

				public void init(int op, String src, String dest, long max) {}

				public boolean count(long count) {return true;}

				public void end() {}
			} 

			class SFTPGetter_<%=cid%> {

				private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

				private com.jcraft.jsch.SftpProgressMonitor monitor = null;

				private int count = 0;

				public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
						continue;
						}

						if (attrs.isDir()) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
							if (!localFile.exists()) {
								localFile.mkdir();
							}
							getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/" + lsEntry.getFilename());
							chdir(remoteDirectory);
						} else if (!attrs.isLink()) {
							downloadFile(localDirectory, lsEntry.getFilename());
						}
					}
				}

				public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
							continue;
						}

						if (!attrs.isDir() && !attrs.isLink()) {

							if (lsEntry.getFilename().matches(maskStr)) {
            					downloadFile(localDirectory, lsEntry.getFilename());
          					}
        				}
      				}
				}

				public void chdir(String path) throws com.jcraft.jsch.SftpException{
					if (!".".equals(path)) {
						cnlSFTP.cd(path);
					}
				}

				public String pwd() throws com.jcraft.jsch.SftpException{
					return cnlSFTP.pwd();
				}

				private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {

					try {
        				cnlSFTP.get(remoteFileName, localFileName, monitor,
          <%
          				if (("overwrite").equals(sftpoverwrite)){
          %>          
            				com.jcraft.jsch.ChannelSftp.OVERWRITE
          <%
         				} else if (("append").equals(sftpoverwrite)){
          %>
            				com.jcraft.jsch.ChannelSftp.APPEND
          <%
          				} else if (("resume").equals(sftpoverwrite)){
          %>
            				com.jcraft.jsch.ChannelSftp.RESUME
          <%
          				}
          %>
					);
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
						<%}%>
        				msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
        				<%if (bPrintMsg) {%>
          					System.out.println("file [" + remoteFileName + "] downloaded successfully.");
        				<%}%>
				    	globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
			      	} catch (com.jcraft.jsch.SftpException e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());

        				if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
							msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
						}
				        throw e;
					}
					count++;
				}
			}

  <%
			if ("true".equals(useExistingConn)){
				String conn= "conn_" + connection;
    %>
				com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
				<%if(isLog4jEnabled){%>
					if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
						log.info("<%=cid%> - Use an existing connection.Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
					}
				<%}%>
				if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
			  		c_<%=cid%>.cd(c_<%=cid%>.getHome());
			  	}
  <%
			} else{
				final String passwordFieldKey = "__PASSWORD__";
  %>    
				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/sftp_connect.javajet"%>
			    
		    <%if(use_encoding) {%>
		    	c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
		    <%}%>
  <%
			}
  %>
			com.jcraft.jsch.SftpProgressMonitor monitor_<%=cid%> = new MyProgressMonitor_<%=cid%>();
			SFTPGetter_<%=cid%> getter_<%=cid%> = new SFTPGetter_<%=cid%>();
			getter_<%=cid%>.cnlSFTP = c_<%=cid%>;
			getter_<%=cid%>.monitor = monitor_<%=cid%>;
			String remotedir_<%=cid %> = <%=remotedir%>;
			if (!".".equals(remotedir_<%=cid %>)) {
				c_<%=cid%>.cd(remotedir_<%=cid %>);
			}
<%
} else {
%>
    abstract class FTPGetter_<%=cid%> {
        protected org.apache.commons.net.ftp.FTPClient ftpClient = null;
        protected int count = 0;

        public void getAllFiles(String remoteDirectory, String localDirectory)
            throws IllegalStateException, IOException, java.io.FileNotFoundException {

            if(!chdir(remoteDirectory)){
                //change dir fail
               <%if(isLog4jEnabled){%>
                log.error("Change dir fail. Skip Directory: " + remoteDirectory);
                <%}%>
                return;
            }
            String path = ftpClient.printWorkingDirectory();
            org.apache.commons.net.ftp.FTPFile[] ftpFiles = null;
            ftpFiles = ftpClient.listFiles();
            String[] nameLists = null;
            try {
                 nameLists = ftpClient.listNames();
            } catch (IOException e) {
                 e.printStackTrace();
            }
            if( nameLists!=null && (ftpFiles == null || ftpFiles.length == 0)){
            	//if the file is folder, catch the FTPException and recur
                for (String ftpFileName : nameLists){
                try{
                    downloadFile(localDirectory + "/" + ftpFileName,ftpFileName);
                } catch (IOException e) {
            		<%if(isLog4jEnabled){%>
            			log.warn("<%=cid%> - " + e.getMessage());
            		<%}%>
                  	java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFileName);

                    if (!localFile.exists()) {
                    	localFile.mkdir();
                    }
            	    getAllFiles(path + "/" + ftpFileName, localDirectory + "/" + ftpFileName);
                  	chdir(remoteDirectory);
            	}
            	}
            }else{
                for (org.apache.commons.net.ftp.FTPFile ftpFile : ftpFiles) {

                    if (ftpFile.isDirectory()) {

                        if ((!(".").equals(ftpFile.getName())) && (!("..").equals(ftpFile.getName()))) {
                            java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFile.getName());

                            if (!localFile.exists()) {
                                localFile.mkdir();
                            }
                            getAllFiles(path + "/" + ftpFile.getName(), localDirectory + "/" + ftpFile.getName());
                            chdir(path);
                        }
                    } else if (!ftpFile.isSymbolicLink()) {
                        downloadFile(localDirectory + "/" + ftpFile.getName(),ftpFile.getName());
                    }
                }
            }
        }

        public void getFiles(String remoteDirectory, String localDirectory, String maskStr) 
            throws IllegalStateException, IOException, java.io.FileNotFoundException {

            chdir(remoteDirectory);
            String[] nameLists = ftpClient.listNames();
            if(nameLists != null){
                for (String fileName : nameLists) {
                    if (fileName.matches(maskStr)) {
                        downloadFile(localDirectory + "/" + fileName,fileName);
                    }
                }
            }
        }

        public boolean chdir(String path) throws IllegalStateException, IOException {
            if (!".".equals(path)) {
                return ftpClient.changeWorkingDirectory(path);
            }
            return true;
        }

        public String pwd() throws IllegalStateException, IOException {
            return ftpClient.printWorkingDirectory();
        }

        protected abstract void downloadFile(String localFileName, String remoteFileName)
            throws IllegalStateException, java.io.FileNotFoundException, IOException;
    }
<%
    if (!ftps) { // *** ftp *** //
%>
        org.apache.commons.net.ftp.FTPClient ftp_<%=cid %> = null;
<%
        if (("true").equals(useExistingConn)) {
            String conn= "conn_" + connection;
%>
            ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPClient) globalMap.get("<%=conn %>");
			<%if(!moveToCurrentDir){%>
				String rootDir_<%=cid %> = ftp_<%=cid %>.printWorkingDirectory();
			<%}%>
			<%if(isLog4jEnabled){%>
                if(ftp_<%=cid %>!=null) {
                    log.info("<%=cid%> - Use an existing connection. Connection hostname: " +  ftp_<%=cid %>.getRemoteAddress().toString() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + ".");
                }
            <%}%>
<%
        } else {
            passwordFieldName = "__PASSWORD__";
%>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftp_connect.javajet"%>
<%
        }

        if("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))){
%>
            ftp_<%=cid %>.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
<%
        } else {
%>
            ftp_<%=cid %>.setFileType(org.apache.commons.net.ftp.FTP.ASCII_FILE_TYPE);
<%
        }
%>
        final java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();
        FTPGetter_<%=cid%> getter_<%=cid%> = new FTPGetter_<%=cid%>() {
            @Override
            protected void downloadFile(String localFileName, String remoteFileName)
            throws IllegalStateException, java.io.FileNotFoundException, IOException {
                java.io.File localFile = new java.io.File(localFileName);
<%
                if (append) {
%>
                    try (java.io.FileOutputStream localFos = new java.io.FileOutputStream(localFileName, true)) {
                        boolean status = ftpClient.retrieveFile(remoteFileName, localFos);
                        if(status){
                        <%if(isLog4jEnabled){%>
                            log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
                        <%}%>
                        msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
                        <%if (bPrintMsg) {%>
                            System.out.println("file [" + remoteFileName + "] downloaded successfully.");
                        <%}%>
                        globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
                        count++;
                        }else{
                            msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
                            globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
                        }
                    } catch (IOException e) {
                        globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                        msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
                        globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
                        throw e;
                    }
<%
                } else if ("never".equals(overwrite)) {
%>
                    if (!localFile.exists()) {
                        boolean status = downloadFileWithOverwrite(localFileName, remoteFileName);
                        if(!status){
                            localFile.delete();
                        }
                    } else {
                        <%if(isLog4jEnabled){%>
                        log.info("<%= cid %> - file ["+ remoteFileName +"] exit transmission.");
                        <%}%>
                        msg_<%=cid%>.add("file ["+ remoteFileName +"] exit transmission.");
                        globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");
                    }
<%
                } else if ("always".equals(overwrite)){
%>
                    downloadFileWithOverwrite(localFileName, remoteFileName);
<%
                } else if ("size_differ".equals(overwrite)) {
%>
                    if (localFile.exists()) {
                        long ftpSize = java.util.Arrays.stream(ftpClient.listFiles(remoteFileName)).findFirst().get().getSize();
                        long localSize = localFile.length();
                        if (ftpSize != localSize) {
                            downloadFileWithOverwrite(localFileName, remoteFileName);
                        } else {
                            <%if(isLog4jEnabled){%>
                                    log.info("<%= cid %> - file ["+ remoteFileName +"] exit transmission.");
                             <%}%>
                            msg_<%=cid%>.add("file ["+ remoteFileName +"] exit transmission.");
                            globalMap.put("<%=cid %>_CURRENT_STATUS", "No file transfered.");
                        }
                    } else {
                        boolean status = downloadFileWithOverwrite(localFileName, remoteFileName);
                        if(!status){
                            localFile.delete();
                        }
                    }
<%
                }
%>
            }
            
            private boolean downloadFileWithOverwrite(String localFileName, String remoteFileName)
                throws IllegalStateException, java.io.FileNotFoundException, IOException {
                try (java.io.FileOutputStream localFos = new java.io.FileOutputStream(localFileName)) {
                        boolean status = ftpClient.retrieveFile(remoteFileName, localFos);
                        if(status){
                            <%if(isLog4jEnabled){%>
                                log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
                            <%}%>
                            msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded successfully.");
                            <%if (bPrintMsg) {%>
                                System.out.println("file [" + remoteFileName + "] downloaded successfully.");
                            <%}%>
                            globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer OK.");
                            count++;
                        }
                        return status;
                    } catch (IOException e) {
                        globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
                        msg_<%=cid%>.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
                        globalMap.put("<%=cid %>_CURRENT_STATUS", "File transfer fail.");
                        throw e;
                    }
            }
        };
        getter_<%=cid%>.ftpClient = ftp_<%=cid %>;
<%
    } else { // *** ftps *** //
%>
        org.apache.commons.net.ftp.FTPSClient ftp_<%=cid %> =null;
<%
        if ("false".equals(useExistingConn)){
%>
            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftps_connect.javajet"%>
<%
        } else {
            String conn= "conn_" + connection;
%>
            <% /* get connection from globalMap*/ %>
            String rootDir_<%=cid %> = null;
            ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("<%=conn %>");
<%
            if (!moveToCurrentDir) {
%>
                rootDir_<%=cid %> = ftp_<%=cid %>.printWorkingDirectory();
<%
            }

            if(isLog4jEnabled) {
%>
                if(ftp_<%=cid %>!=null) {
                    log.info("<%=cid%> - Use an existing connection.Connection hostname: " + ftp_<%=cid %>.getRemoteAddress().toString() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + ".");
                }
<%
            }
        }
%>
        FTPGetter_<%=cid%> getter_<%=cid%> = new FTPGetter_<%=cid%>() {
            @Override
            protected void downloadFile(String localFileName, String remoteFileName)
            throws IllegalStateException, java.io.FileNotFoundException, IOException {
                try (java.io.FileOutputStream localFos = new java.io.FileOutputStream(localFileName)) {
                    boolean status = ftpClient.retrieveFile(remoteFileName, localFos);
                    if(status){
                        <%if(isLog4jEnabled){%>
                            log.debug("<%=cid%> - Downloaded file " + (count +1) +  " : '" + remoteFileName + "' successfully.");
                        <%}%>
                        count++;
                    }
                }
            }
        };
        getter_<%=cid%>.ftpClient = ftp_<%=cid %>;
<%
    } //common code for ftp and ftps:
%>
    String remotedir_<%=cid%> = <%=remotedir%>;
    if (!".".equals(remotedir_<%=cid %>)) {
        boolean cwdSuccess_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(remotedir_<%=cid %>);

        if (!cwdSuccess_<%=cid %>) {
            throw new RuntimeException("Failed to change remote directory. " + ftp_<%=cid %>.getReplyString());
        }
	}
<%
}
// *** share code *** //
%>
java.util.List<String> maskList_<%=cid %> = new java.util.ArrayList<String>();

<%
for (int i = 0; i < files.size(); i++) {
  Map<String, String> line = files.get(i);
%>
  maskList_<%=cid %>.add(<%= line.get("FILEMASK") %>);
<%
}
%>
String localdir_<%=cid %>  = <%=localdir%>;  
//create folder if local direcotry (assigned by property) not exists
java.io.File dirHandle_<%=cid %> = new java.io.File(localdir_<%=cid %>);

if (!dirHandle_<%=cid %>.exists()) {
  dirHandle_<%=cid %>.mkdirs();
}
String root_<%=cid %> = getter_<%=cid %>.pwd();
<% /*avoid sending CWD when remotedir is "."*/%>
if ("/".equals(root_<%=cid %>)) {
	root_<%=cid %> = ".";
}

<%if(isLog4jEnabled){%>
	log.info("<%=cid%> - Downloading files from the server.");
<%}%>
for (String maskStr_<%=cid%> : maskList_<%=cid%>) { 
