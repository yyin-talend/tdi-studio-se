<%@ jet 
imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory		
		java.util.List	
		java.util.Map
		java.util.Set
		java.util.HashSet
		java.text.DateFormat
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String cid =  node.getUniqueName();
String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
String commitEvery = "0";//ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
String propagateRecordset = ElementParameterParser.getValue(node,"__PROPAGATE_RECORD_SET__");
String recordsetColumn = ElementParameterParser.getValue(node,"__RECORD_SET_COLUMN__");

boolean usePrepareStatement = "true".equals(ElementParameterParser.getValue(node,"__USE_PREPAREDSTATEMENT__"));
String dbquery= ElementParameterParser.getValue(node, "__QUERY__");
dbquery = org.talend.core.model.utils.NodeUtil.replaceCRLFInMEMO_SQL(dbquery);

String theDistribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
String theVersion = ElementParameterParser.getValue(node, "__HIVE_VERSION__");
String connMode = ElementParameterParser.getValue(node, "__CONNECTION_MODE__");

final String studioVersion = org.talend.commons.utils.VersionUtils.getDisplayVersion();

String encryptedToken = null;
if("true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"))) {
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    for (INode pNode : node.getProcess().getNodesOfType("tHiveConnection")) {
        if(connection!=null && connection.equals(pNode.getUniqueName())) {
            theDistribution = ElementParameterParser.getValue(pNode, "__DISTRIBUTION__");
            theVersion = ElementParameterParser.getValue(pNode, "__HIVE_VERSION__");
            connMode = ElementParameterParser.getValue(pNode, "__CONNECTION_MODE__");
        }
    }
}

org.talend.hadoop.distribution.component.HiveComponent hiveDistrib = null;
try {
    hiveDistrib = (org.talend.hadoop.distribution.component.HiveComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(theDistribution, theVersion);
} catch (java.lang.Exception e) {
    e.printStackTrace();
    return "";
}
boolean isCustom = hiveDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

if(hiveDistrib.isExecutedThroughWebHCat()) {
%>
	query_<%=cid %> = <%=dbquery%>;
	bw_<%=cid%>.write(query_<%=cid %> + ";");
	globalMap.put("<%=cid%>_QUERY", query_<%=cid %>);
	
	bw_<%=cid%>.close();

	if(libjars_<%=cid%>.length() > 0) {
		instance_<%=cid%>.setLibJars(libjars_<%=cid%>.toString().substring(0, libjars_<%=cid%>.length()-1));
	}
	instance_<%=cid%>.callWS(instance_<%=cid%>.sendFiles());
	int exitCode_<%=cid%> = instance_<%=cid%>.execute();
	if(exitCode_<%=cid%> > 0) {
		
<%
		if(("true").equals(dieOnError)) {
%>
			throw new Exception("The Hive job failed. Please read the logs for more details");
<%
		} else {
%>
			System.err.println("The Hive job failed. Please read the logs for more details");
<%
			if(isLog4jEnabled) {
%>
				log.error("<%=cid%> - The Hive job failed. Please read the logs for more details");
<%
			}
		}
%>
	}
<%
} else if("DATAPROC".equalsIgnoreCase(connMode)) { // Dataproc
    if(isLog4jEnabled) {
%>
        log.debug("Query for <%=cid%>: " + query_<%=cid %>.replace("';'", "'\\;'") + ";");
<%
    }
%>
    query_<%=cid %> = <%=dbquery%>;
    instance_<%=cid%>.addQuery(query_<%=cid %>.replace("';'", "'\\;'") + ";");
    globalMap.put("<%=cid%>_QUERY", query_<%=cid %>);
    int exitCode_<%=cid%> = instance_<%=cid%>.executeJob();
    System.out.println(instance_<%=cid%>.getJobLog());
    if(exitCode_<%=cid%> > 0) {

<%
        if(("true").equals(dieOnError)) {
%>
            throw new Exception("The Hive job failed. Please read the logs for more details");
<%
        } else {
%>
            System.err.println("The Hive job failed. Please read the logs for more details");
<%
            if(isLog4jEnabled) {
%>
                log.error("<%=cid%> - The Hive job failed. Please read the logs for more details");
<%
            }
        }
%>
    }
<%
} else { //Standalone mode
	List<Map<String, String>> prepareStatementParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SET_PREPAREDSTATEMENT_PARAMETERS__");  
	
	String incomingConnName = null;
	
	Set<String> inputCols = new HashSet<String>();
	
	List<IMetadataColumn> columnList = null;
	
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
	    IConnection rejectConn = rejectConns.get(0);
	    rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
	    rejectColumnList = metadataTable.getListColumns();
	}
	
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	
	boolean hasOutgoingDataConnection = false;
	for(IConnection conn : outgoingConns) {
	    if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			if(!hasOutgoingDataConnection){
				hasOutgoingDataConnection = true;
			}
			%>    
			<%=conn.getName() %> = null;            
			<%      
	    }
	}
	%>
	query_<%=cid %> = <%=dbquery%>;
	whetherReject_<%=cid%> = false;

	<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		if (metadata!=null) {
			List< ? extends IConnection> conns = node.getIncomingConnections();
			columnList = metadata.getListColumns();
			if(conns != null && conns.size()>0){
				IConnection conn = conns.get(0);
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
					incomingConnName = conn.getName();
					IMetadataTable inputMetadataTable = conn.getMetadataTable();
					for (IMetadataColumn inputCol : inputMetadataTable.getListColumns()) {
						inputCols.add(inputCol.getLabel());
					}
				}
			}//end of connection size.
		}//end of metadatas
	}
	if(!hasOutgoingDataConnection || columnList == null || columnList.size() < 1){
		propagateRecordset = "false";
	}
	%>
	globalMap.put("<%=cid %>_QUERY",query_<%=cid %>);
	<%
	if(("true").equals(propagateRecordset)) {
	    %>
		java.sql.ResultSet rs_<%=cid %> = null;
		<%
	}
	%>
	try {
		<%
		boolean setApplicationName=ElementParameterParser.getBooleanValue(node, "__SET_APPLICATION_NAME__");
		if (setApplicationName) {
			%>
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Hive/SetQueryName.javajet"%>

			<%if(isLog4jEnabled){%>
                log.info("Query sent to HiveServer2 to be executed with [Application Name(MapReduce)/DAG Name(Tez): " + queryIdentifier_<%=cid%> + "]");
             <%}%>
		<%
		}
		if (usePrepareStatement) {
		
			for (Map<String, String> param : prepareStatementParameters) {
				
				if ("Date".equals(param.get("PARAMETER_TYPE"))) {
	%>
				pstmt_<%=cid %>.setTimestamp(<%=param.get("PARAMETER_INDEX")%>,new java.sql.Timestamp(<%=param.get("PARAMETER_VALUE")%>.getTime()));
	<%
				} else {
	%>
				pstmt_<%=cid %>.set<%=param.get("PARAMETER_TYPE")%>(<%=param.get("PARAMETER_INDEX")%>,<%=param.get("PARAMETER_VALUE")%>);
	<%
				}
			}
			
			if(("true").equals(propagateRecordset)){
	%>
			rs_<%=cid %> = pstmt_<%=cid %>.executeQuery();
	<%
			} else {
	%>
	    	pstmt_<%=cid %>.execute();
	    	<%
			}
			
		} else {
			if(("true").equals(propagateRecordset)){
			%>
				rs_<%=cid %> = stmt_<%=cid %>.executeQuery(query_<%=cid %>);
			<%
			} else {
		    %>
		  	stmt_<%=cid %>.execute(query_<%=cid %>);
	    	<%
			}
		}
		%>
	    } catch (java.lang.Exception e) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
	        whetherReject_<%=cid%> = true;
	        <%
	        if (("true").equals(dieOnError)) {
	            %>
	            throw(e);
	            <%
	        } else {
				if(isLog4jEnabled){%>
					log.error("<%=cid%> - " + e.getMessage());
				<%}
	            if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
	                %>
	                <%=rejectConnName %> = new <%=rejectConnName %>Struct();
	                <%
	                if(incomingConnName!=null){
		                for(IMetadataColumn column : columnList) {
		                	if (inputCols.contains(column.getLabel())) {
		                    %>
		                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
		                    <%
		                    }
		                }
	                }
	                %>
	                <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
	                <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
	                <%
	            } else {
	                %>
	                System.err.print(e.getMessage());
	                <%
	            }
	        } 
	        %>
	    }
		<%
		
	if(outgoingConns != null && outgoingConns.size() > 0) {
	    %>
	    if(!whetherReject_<%=cid%>) {
	        <%
	        for(IConnection outgoingConn : outgoingConns) {
	            if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
	                if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	                    %>
	                    <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
	                    <%
	                    for(IMetadataColumn column : columnList) {
	                    	if(("true").equals(propagateRecordset) && column.getLabel().equals(recordsetColumn)){
	                    	    %>
	                    	    <%=outgoingConn.getName()%>.<%=column.getLabel()%> = rs_<%=cid %>;
	                    	    <%
	                    	} else {
	                    		if(incomingConnName!=null){
	                    			if (inputCols.contains(column.getLabel())) {
	                    	    %>
	                    	    <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
	                    	    <%
	                    	    	}
	                    	    }
	              			}
	                    }
	                }
	            }
	        }
	        %>
	    }
	    <%
	}	
		
	if(!("true").equals(useExistingConn)) {
		if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
	        %>
	        commitCounter_<%=cid%>++;
	        if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
	        
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Starting to commit.");
				<%}%>
	        	conn_<%=cid%>.commit();
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Commit has succeeded.");
				<%}%>
	        	
	        	commitCounter_<%=cid%>=0;
	        	
	        }
	        <%
		}
	}
}
%>

