<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
LogUtil commonLog = new LogUtil(node);
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String ftpsPort = ElementParameterParser.getValue(node, "__FTPS_PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");  
String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node, "__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node, "__PRIVATEKEY__");

List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");  
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node, "__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node, "__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node, "__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node, "__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node, "__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean createDirIfNotExist = ("true").equals(ElementParameterParser.getValue(node, "__CREATE_DIR_IF_NOT_EXIST__"));
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean sftp = false;
boolean ftps = false; 

String protectionLevel = ElementParameterParser.getValue(node, "__FTPS_PROT__");
String protectionBufferSize = ElementParameterParser.getValue(node, "__FTPS_PROTECTION_BUFF_SIZE__");
String timeoutValue = ElementParameterParser.getValue(node, "__CONNECTION_TIMEOUT__");
boolean useRemoteVerification = ("true").equals(ElementParameterParser.getValue(node, "__REMOTE_VERIFICATION__"));
boolean useStrictReplyParsing = ("true").equals(ElementParameterParser.getValue(node, "__USE_STRICT_REPLY_PARSING__"));

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

boolean isConfigClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));
List<Map<String, String>> clientParams = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CLIENT_PARAMETERS__");
String passwordFieldName = "";

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
      ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__")); 
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
%>
  int connectionTimeout_<%=cid %> = Integer.valueOf(<%=timeoutValue %>);
<%
}

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy && !("true").equals(useExistingConn)) {
%>
  java.util.Properties props_<%=cid%> = System.getProperties();
  props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
  props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
  props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
  
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>

  props_<%=cid%>.put("java.net.socks.password",decryptedProxyPassword_<%=cid%>);
  java.net.Authenticator.setDefault(new java.net.Authenticator() {
        public java.net.PasswordAuthentication getPasswordAuthentication() {
            return new java.net.PasswordAuthentication(<%=proxyUser %>, decryptedProxyPassword_<%=cid%>.toCharArray());
        }
  });
<%}%>
int nb_file_<%=cid%> = 0;

<%if (sftp) {%>// *** sftp *** //

	class MyProgressMonitor_<%=cid%> implements com.jcraft.jsch.SftpProgressMonitor {
		public void init(int op, String src, String dest, long max) {}
    	public boolean count(long count) { return true;}
    	public void end() {}
  	}

	<%if (("true").equals(useExistingConn)) {
    	String conn= "conn_" + connection;
    %>
    	com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Uses an existing connection. Connection username " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}%>
    	if(c_<%=cid%>.getHome()!=null && !c_<%=cid%>.getHome().equals(c_<%=cid%>.pwd())){
  			c_<%=cid%>.cd(c_<%=cid%>.getHome());
  		}
	<%} else {
		final String passwordFieldKey = "__PASSWORD__";	
	%>    
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/sftp_connect.javajet"%>

		<%if(use_encoding) {%>
			c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
		<%}%>
		
	<%}%>

<%
	if (createDirIfNotExist) {
%>
		String rootDir_<%=cid %> = c_<%=cid %>.pwd();
		String remotedir_<%=cid %> = (<%=remotedir %>).replaceAll("\\\\", "/");
		String[] dirsTree_<%=cid %> = remotedir_<%=cid %>.split("/");
		if (remotedir_<%=cid %>.startsWith("/")) {
		    c_<%=cid %>.cd("/"); // go to root path if remote is absolute.
		}
		for (String dir: dirsTree_<%=cid %>) {
			if (dir.isEmpty()) continue;

			try {
				c_<%=cid %>.cd(dir);
			} catch (com.jcraft.jsch.SftpException ignored) {
<%
				if (isLog4jEnabled) {
%>
					log.debug("Can't find directory " + dir + ". Component will create it");
<%
				}
%>
				c_<%=cid%>.mkdir(dir);
				c_<%=cid %>.cd(dir);
			}
		}
		//back to the root
		c_<%=cid %>.cd(rootDir_<%=cid %>);

<%
	}
%>
	// because there is not the same method in JSch class as FTPClient class, define a list here
	java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<String>();
	com.jcraft.jsch.SftpProgressMonitor monitor<%=cid%> = new MyProgressMonitor_<%=cid%>();
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
  
  <%
	for (int i = 0; i < files.size(); i++) {
    	Map<String, String> line = files.get(i);
    %>
			java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
		    map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>, <%= line.get("NEWNAME") %>);    
		    list<%=cid %>.add(map<%=cid %><%=i %>);       
  <%
	}
  %>  
	String localdir<%=cid %> = <%=localdir%>;
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Putting file to the server.");
	<%}%>
	
	class StatCheck_<%=cid%> {
			
			boolean statOK(com.jcraft.jsch.ChannelSftp client, String path) {
					try {
							return client.stat(path).getAtimeString() != null;
					} catch (Exception e) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
							<%if(isLog4jEnabled){%>
							log.warn("<%=cid%> - Directory or file permission denied for checking the status of the path : " + path);
							<%}%>
					}
					
					return false;
			}
			
	}
	
	StatCheck_<%=cid%> sc_<%=cid%> = new StatCheck_<%=cid%>();
	
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {

<%} else {
        if (!ftps) {%> // *** ftp *** //
            org.apache.commons.net.ftp.FTPClient ftp_<%=cid %> = null;
<%
            if (("true").equals(useExistingConn)) {
                String conn= "conn_" + connection; 
%>
                ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPClient) globalMap.get("<%=conn %>");
                <%if(isLog4jEnabled){%>
                    if(ftp_<%=cid %>!=null) {
                        log.info("<%=cid%> - Use an existing connection. Connection hostname: " +  ftp_<%=cid %>.getRemoteAddress().toString() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + ".");
                    }
                <%}%>
<%
            } else {
                passwordFieldName = "__PASSWORD__";
%>
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftp_connect.javajet"%>
<%
            }
%>
            // msg_<%=cid%> likes a String[] to save the message from transfer.  
            java.util.List<String> msg_<%=cid%> = new java.util.ArrayList<>();
<%
        } else { // *** ftps *** //
            String keystoreFile = ElementParameterParser.getValue(node,"__KEYSTORE_FILE__"); 
            String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
%>
            org.apache.commons.net.ftp.FTPSClient ftp_<%=cid %> = null;
<%
            if(("false").equals(useExistingConn)){
%>
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/FTP/ftps_connect.javajet"%>
<%
            } else {
                String conn= "conn_" + connection; 
%>
                ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("<%=conn %>");
                <%if(isLog4jEnabled){%>
                    if(ftp_<%=cid %>!=null) {
                        log.info("<%=cid%> - Uses an existing connection. Connection hostname: " +  ftp_<%=cid %>.getRemoteAddress().toString() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
                    }
                <%}%>
<%
            }
        } //common code for ftp and ftps:


       if("binary".equalsIgnoreCase(ElementParameterParser.getValue(node, "__MODE__"))){

%>

          ftp_<%=cid %>.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);

<%

        } else {

%>

          ftp_<%=cid %>.setFileType(org.apache.commons.net.ftp.FTP.ASCII_FILE_TYPE);

<%

        }

%>
        String rootDir_<%=cid %> = ftp_<%=cid %>.printWorkingDirectory();
        String remotedir_<%=cid%> = (<%=remotedir%>).replaceAll("\\\\", "/");
        boolean cwdSuccess_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(remotedir_<%=cid %>);
<%
        if(createDirIfNotExist) {
%>
			if(!cwdSuccess_<%=cid %>){
				String[] dirsTree_<%=cid %> = remotedir_<%=cid %>.split("/");
				if (remotedir_<%=cid %>.startsWith("/")) {
				    ftp_<%=cid %>.changeWorkingDirectory("/"); // go to root path if remote is absolute.
				}
				for (String dir: dirsTree_<%=cid %>) {
				    if (dir != null && !dir.isEmpty()) {
					    ftp_<%=cid %>.makeDirectory(dir);
					    ftp_<%=cid %>.changeWorkingDirectory(dir);
					}
				}
				ftp_<%=cid %>.changeWorkingDirectory(rootDir_<%=cid %>);
				cwdSuccess_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(remotedir_<%=cid %>);
			}
<%
        }
%>

        if (!cwdSuccess_<%=cid %>) {
            throw new RuntimeException("Failed to change remote directory. " + ftp_<%=cid %>.getReplyString());
        }

        java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();

<%
        for (int i = 0; i < files.size(); i++) {
            Map<String, String> line = files.get(i);
%>
            java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
            map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>, <%= line.get("NEWNAME") %>);
            list<%=cid %>.add(map<%=cid %><%=i %>);
<%
        }
%>
        String localdir<%=cid %> = <%=localdir%>;
        <%if(isLog4jEnabled){%>
            log.info("<%=cid%> - Uploading files to the server.");
        <%}%>
        for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {
<%
}
%>
