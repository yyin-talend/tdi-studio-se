<%@ jet
	    imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
	    "
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();

	String authMode = ElementParameterParser.getValue(node,"__AUTH_MODE__");
	String credentialsFile = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_CREDENTIALS_FILE__");
	String clientId = ElementParameterParser.getValue(node,"__CLIENT_ID__");
	String clientSecret = ElementParameterParser.getValue(node,"__CLIENT_SECRET__");
	String projectId = ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String authorizationCode = ElementParameterParser.getValue(node,"__AUTHORIZATION_CODE__");
	String query = ElementParameterParser.getValue(node,"__QUERY__");
	boolean useLegacySql = ElementParameterParser.getBooleanValue(node,"__USE_LEGACY_SQL__");
	String resultSizeType = ElementParameterParser.getValue(node,"__RESULT_SIZE__");
	String basePackage = "";
	boolean isCustomTemporaryName = ElementParameterParser.getBooleanValue(node,"__USE_CUSTOM_TEMPORARY_DATASET__");
	String tempDataset =  ElementParameterParser.getValue(node,"__TEMPORARY_DATASET_NAME__");

	String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
	String advancedSeparatorStr = ElementParameterParser.getValue(node, "__ADVANCED_SEPARATOR__");
	boolean advancedSeparator = (advancedSeparatorStr!=null&&!("").equals(advancedSeparatorStr))?("true").equals(advancedSeparatorStr):false;
	String thousandsSeparator = ElementParameterParser.getValueWithJavaType(node, "__THOUSANDS_SEPARATOR__", JavaTypesManager.CHARACTER);
	String decimalSeparator = ElementParameterParser.getValueWithJavaType(node, "__DECIMAL_SEPARATOR__", JavaTypesManager.CHARACTER);
	final boolean forceSingleQueryExecution = ElementParameterParser.getBooleanValue(node,"__FORCE_SINGLE_QUERY_EXEC__");

	query = query.replaceAll("\n"," ");
	query = query.replaceAll("\r"," ");

    String tokenFile = ElementParameterParser.getValue(node,"__TOKEN_NAME__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	//Dynamic start
	List<IMetadataTable> metadatas = node.getMetadataList();
	    int sizeListColumns = 0;
		List<IMetadataColumn> columnList = null;
		boolean isDynamic = false;
	    if ((metadatas!=null)&&(metadatas.size()>0)) {
		    IMetadataTable metadata = metadatas.get(0);
			isDynamic = metadata.isDynamicSchema();
		    if (metadata!=null) {
			    columnList = metadata.getListColumns();
			    sizeListColumns = columnList.size();
		    }
	    }
		int dynamic_index=-1;

	//Dynamic end


    if (authMode.equals("OAUTH") || authMode.equals("TOKEN") ) {
%>
		final String PROJECT_ID_<%=cid %> = <%=projectId %>;
    com.google.api.services.bigquery.Bigquery bigqueryclient_<%=cid%> = null;
    com.google.api.client.auth.oauth2.Credential credential_<%=cid%> = null;
    long nb_line_<%=cid%> = 0;
		final com.google.api.client.http.HttpTransport TRANSPORT_<%=cid %> = new com.google.api.client.http.javanet.NetHttpTransport();
		final com.google.api.client.json.JsonFactory JSON_FACTORY_<%=cid %> = new com.google.api.client.json.jackson2.JacksonFactory();
<%
      if (authMode.equals("OAUTH")) {
		%>
		final String CLIENT_ID_<%=cid %> = <%=clientId %>;
		<%
		String passwordFieldName = "__CLIENT_SECRET__";
		%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		final String CLIENT_SECRET_<%=cid%> = "{\"web\": {\"client_id\": \""+<%=clientId%>+"\",\"client_secret\": \"" +decryptedPassword_<%=cid%>+ "\",\"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\"token_uri\": \"https://accounts.google.com/o/oauth2/token\"}}";

		// Static variables for API scope, callback URI, and HTTP/JSON functions
		final List<String> SCOPES_<%=cid%> = java.util.Arrays.asList("https://www.googleapis.com/auth/bigquery");
		final String REDIRECT_URI_<%=cid%> = "urn:ietf:wg:oauth:2.0:oob";

		com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets clientSecrets_<%=cid%> = com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.load(
						new com.google.api.client.json.jackson2.JacksonFactory(), new java.io.InputStreamReader(new java.io.ByteArrayInputStream(
								CLIENT_SECRET_<%=cid%>.getBytes())));

		com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow flow_<%=cid%> = null;

		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Service Account Scopes [https://www.googleapis.com/auth/bigquery]");
			log.info("<%=cid%> - Redirect uris [urn:ietf:wg:oauth:2.0:oob]");
			log.info("<%=cid%> - Attempt to load existing refresh token.");
		<%
		}
		%>

		// Attempt to load existing refresh token
	    String tokenFile_<%=cid %> = <%=tokenFile%>;
		java.util.Properties properties_<%=cid%> = new java.util.Properties();
		try {
			java.io.FileInputStream inputStream_<%=cid%> = new java.io.FileInputStream(tokenFile_<%=cid %>);
			properties_<%=cid%>.load(inputStream_<%=cid%>);
			inputStream_<%=cid%>.close();
		} catch (java.io.FileNotFoundException e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
			<%
	    	if(isLog4jEnabled){
			%>
				log.warn("<%=cid%> - "+e_<%=cid%>.getMessage());
			<%
			}
	    	%>
		} catch (java.io.IOException ee_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",ee_<%=cid%>.getMessage());
			<%
	    	if(isLog4jEnabled){
			%>
				log.warn("<%=cid%> - "+ee_<%=cid%>.getMessage());
			<%
			}
	    	%>
		}
		String storedRefreshToken_<%=cid%> = (String) properties_<%=cid%>.get("refreshtoken");

		// Check to see if the an existing refresh token was loaded.
		// If so, create a credential and call refreshToken() to get a new
		// access token.
		if (storedRefreshToken_<%=cid%> != null) {
			// Request a new Access token using the refresh token.
			credential_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleCredential.Builder().setTransport(TRANSPORT_<%=cid%>)
					.setJsonFactory(JSON_FACTORY_<%=cid%>).setClientSecrets(clientSecrets_<%=cid%>)
					.build().setFromTokenResponse(new com.google.api.client.auth.oauth2.TokenResponse().setRefreshToken(storedRefreshToken_<%=cid%>));

			credential_<%=cid%>.refreshToken();
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - An existing refresh token was loaded.");
			<%
			}
			%>
		} else {
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - The refresh token does not exist.");
			<%
			}
			%>
			String authorizationCode_<%=cid%> = <%=authorizationCode%>;
			if(authorizationCode_<%=cid%> == null || "".equals(authorizationCode_<%=cid%>) || "\"\"".equals(authorizationCode_<%=cid%>)) {
				String authorizeUrl_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl(
						clientSecrets_<%=cid%>, REDIRECT_URI_<%=cid%>, SCOPES_<%=cid%>).setState("").build();

				System.out
						.println("Paste this URL into a web browser to authorize BigQuery Access:\n"
								+ authorizeUrl_<%=cid%>);
				<%
		    	if(isLog4jEnabled){
				%>
					log.warn("<%=cid%> - Paste this URL into a web browser to authorize BigQuery Access:\n"
									+ authorizeUrl_<%=cid%>);
				<%
				}
		    	%>
				throw new java.lang.Exception("Authorization Code error");
			} else {
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Exchange the auth code for an access token and refesh token.");
				<%
				}
				%>
				// Exchange the auth code for an access token and refesh token
				if (flow_<%=cid%> == null) {
					flow_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),
							new com.google.api.client.json.jackson2.JacksonFactory(), clientSecrets_<%=cid%>, SCOPES_<%=cid%>)
							.setAccessType("offline").setApprovalPrompt("force")
							.build();
				}
				com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse response_<%=cid%> = flow_<%=cid%>.newTokenRequest(authorizationCode_<%=cid%>).setRedirectUri(REDIRECT_URI_<%=cid%>).execute();
				credential_<%=cid%> = flow_<%=cid%>.createAndStoreCredential(response_<%=cid%>, null);

				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Store the refresh token for future use.");
				<%
				}
				%>
				// Store the refresh token for future use.
				java.util.Properties storeProperties_<%=cid%> = new java.util.Properties();
				storeProperties_<%=cid%>.setProperty("refreshtoken", credential_<%=cid%>.getRefreshToken());
        try (java.io.FileOutputStream outputStream_<%=cid%> = new java.io.FileOutputStream(tokenFile_<%=cid %>)) {
            storeProperties_<%=cid%>.store(outputStream_<%=cid%>,null);
        }
			}
		}
<%} else {

  if (ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) {%>
     final String decryptedAccessToken_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, "__ACCESS_TOKEN__")%>);
     credential_<%=cid%> =
			new com.google.api.client.auth.oauth2.Credential(com.google.api.client.auth.oauth2.BearerToken.authorizationHeaderAccessMethod()).setFromTokenResponse(
				(new com.google.api.client.auth.oauth2.TokenResponse()).setAccessToken(decryptedAccessToken_<%=cid%>));
  <%} else {%>
     credential_<%=cid%> =
			new com.google.api.client.auth.oauth2.Credential(com.google.api.client.auth.oauth2.BearerToken.authorizationHeaderAccessMethod()).setFromTokenResponse(
				(new com.google.api.client.auth.oauth2.TokenResponse()).setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>));
  <%}
} %>
		bigqueryclient_<%=cid%> = new com.google.api.services.bigquery.Bigquery.Builder(TRANSPORT_<%=cid %>, JSON_FACTORY_<%=cid %>,credential_<%=cid%>).setApplicationName("Talend").build();

		<%@ include file="@{org.talend.designer.components.localprovider}/components/tBigQueryInput/BigQueryInputQueryHelper.javajet"%>

		// Start a Query Job
		String querySql_<%=cid %> = <%=query %>;
		System.out.format("Running Query : %s\n", querySql_<%=cid %>);
		<%
		if(isLog4jEnabled){
		%>
			log.debug("<%=cid%> - Running Query: "+querySql_<%=cid %>);
		<%
		}
		if (authMode.equals("OAUTH")) { %>
       BigQueryUtil_<%=cid%> bigQueryUtil_<%=cid%> = new BigQueryUtil_<%=cid%>(PROJECT_ID_<%=cid%>, bigqueryclient_<%=cid%>, tokenFile_<%=cid%><% if (isCustomTemporaryName) {%>, <%=tempDataset%> <%} %>);
    <%} else {%>
       BigQueryUtil_<%=cid%> bigQueryUtil_<%=cid%> = new BigQueryUtil_<%=cid%>(PROJECT_ID_<%=cid%>, bigqueryclient_<%=cid%>, null, <% if (isCustomTemporaryName) {%><%=tempDataset%> <%} else {%>null<% } %>, credential_<%=cid%>);
    <%}

		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Try <%="LARGE".equals(resultSizeType) ? "with" : "without"%> the allowLargeResults flag");
		<%
		}
		%>
        try {
            com.google.api.services.bigquery.model.Job insert_<%=cid %> = bigQueryUtil_<%=cid%>.executeQuery(querySql_<%=cid%>, <%="LARGE".equals(resultSizeType) ? true : false%>, <%=useLegacySql%>);

		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Retrieving records from dataset.");
		<%
		}
		%>
		String pageToken_<%=cid%> = null;
		//Dynamic start

		<%
		if(isDynamic){
		%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/BigQuery/BigQueryHelper_Oauth.javajet"%>
		BigQueryHelper_<%=cid%> helper_<%=cid%> = new BigQueryHelper_<%=cid%>();
    <% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
    credential_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
    <% } %>
		com.google.api.services.bigquery.model.TableSchema schema_<%=cid%> = bigqueryclient_<%=cid%>
						.jobs().getQueryResults(PROJECT_ID_<%=cid%>, insert_<%=cid%>.getJobReference().getJobId()).execute().getSchema();
		routines.system.Dynamic dcg_<%=cid%> =  new routines.system.Dynamic();

		    <%

		    for(int i=0; i< columnList.size(); i++) {
		        if(columnList.get(i).getTalendType().equals("id_Dynamic")){
		            dynamic_index = i+1;
		        }
			}
			%>
			//
			    int colsLen_<%=cid %> = schema_<%=cid%>.getFields().size();
			    for (int i = <%=dynamic_index-1%>; i < colsLen_<%=cid %>-<%=columnList.size()-dynamic_index%>; i++) {
			    	routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
			    	dynamicMetadata_<%=cid%>.setName(schema_<%=cid%>.getFields().get(i).getName());
			    	dynamicMetadata_<%=cid%>.setDbName(dynamicMetadata_<%=cid%>.getName());
			    	dynamicMetadata_<%=cid%>.setType(routines.system.Dynamic.getTalendTypeFromDBType("bigquery_id", schema_<%=cid%>.getFields().get(i).getType(), 0, 0));
					dynamicMetadata_<%=cid%>.setDbType(schema_<%=cid%>.getFields().get(i).getType());
			    	dynamicMetadata_<%=cid%>.setNullable("NULLABLE".equals(schema_<%=cid%>.getFields().get(i).getMode()));
			    	dynamicMetadata_<%=cid%>.setColumnPosition(i);
			    	dcg_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
			    }
			<%

		}
		%>
		//Dynamic end
	<%
	} else if (authMode.equals("SERVICEACCOUNT")) {
	%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet"%>

		<% if(isLog4jEnabled) { %>
			log.info("<%=cid%> - query " + <%=query%>);
		<% } %>

		ServiceAccountBigQueryUtil_<%=cid%> serviceAccountBigQueryUtil_<%=cid%> = new ServiceAccountBigQueryUtil_<%=cid%>();

        try {
                com.google.cloud.bigquery.Job job_<%=cid%> = serviceAccountBigQueryUtil_<%=cid%>.executeQuery(<%=query%>, <%=useLegacySql%>);
            <%
                if(isLog4jEnabled){
            %>
                log.info("<%=cid%> - Retrieving records from dataset.");
            <%
                }
            %>

                com.google.gson.Gson gsonObject_<%=cid%> = new com.google.gson.Gson();
                globalMap.put("<%=cid%>_STATISTICS", gsonObject_<%=cid%>.toJson(job_<%=cid%>.getStatistics()));
                long nb_line_<%=cid%> = 0;
                java.util.List<String> child_statistics_<%=cid%> = null;
                java.util.List<com.google.cloud.bigquery.Job> childJobs_<%=cid%>;
                if(!<%=forceSingleQueryExecution%> && job_<%=cid%>.getStatistics().getNumChildJobs() != null){
                    childJobs_<%=cid%> = serviceAccountBigQueryUtil_<%=cid%>.getChildJobs(job_<%=cid%>.getJobId().getJob());
                    java.util.Collections.reverse(childJobs_<%=cid%>);
                    child_statistics_<%=cid%> = new java.util.ArrayList<>();
                } else {
                    childJobs_<%=cid%> = java.util.Collections.singletonList(job_<%=cid%>);
                }
                for (com.google.cloud.bigquery.Job job_iterable_<%=cid%> : childJobs_<%=cid%>) {
                    if (child_statistics_<%=cid%> != null) {
                        child_statistics_<%=cid%>.add(gsonObject_<%=cid%>.toJson(job_iterable_<%=cid%>.getStatistics()));
                    }
                    if (job_iterable_<%=cid%>.getStatus().getError() != null) {
                        globalMap.put("<%=cid%>_ERROR_MESSAGE", job_iterable_<%=cid%>.getStatus().getError().toString());
                        String message_<%=cid%> = "<%=cid%> - " + job_iterable_<%=cid%>.getStatus().getError().toString();
                        <%
                            log4jFileUtil.logErrorMessage();
                        %>
                        continue;
                    }
                    if (job_iterable_<%=cid%>.getStatistics().getScriptStatistics() != null && "EXPRESSION".equals(job_iterable_<%=cid%>.getStatistics().getScriptStatistics().getEvaluationKind())){
                        continue;
                    }
                    com.google.cloud.bigquery.TableResult result_<%=cid%> = job_iterable_<%=cid%>.getQueryResults();

		//Dynamic start

		<%

		if(isDynamic){
		%>
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/BigQuery/BigQueryHelper_ServiceAccount.javajet"%>
		BigQueryHelper_<%=cid%> helper_<%=cid%> = new BigQueryHelper_<%=cid%>();
		com.google.cloud.bigquery.Schema schema_<%=cid%> = result_<%=cid%>.getSchema();
		routines.system.Dynamic dcg_<%=cid%> =  new routines.system.Dynamic();

		    <%

		    for(int i=0; i< columnList.size(); i++) {
		        if(columnList.get(i).getTalendType().equals("id_Dynamic")){
		            dynamic_index = i+1;
		        }
			}
			%>
			//
			    int colsLen_<%=cid %> = schema_<%=cid%>.getFields().size();
			    for (int i = <%=dynamic_index-1%>; i < colsLen_<%=cid %>-<%=columnList.size()-dynamic_index%>; i++) {
			    	routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
			    	com.google.cloud.bigquery.Field field_<%=cid%> = schema_<%=cid%>.getFields().get(i);
			    	dynamicMetadata_<%=cid%>.setName(field_<%=cid%>.getName());
			    	dynamicMetadata_<%=cid%>.setDbName(dynamicMetadata_<%=cid%>.getName());
			    	com.google.cloud.bigquery.StandardSQLTypeName typeName_<%=cid%> = field_<%=cid%>.getType().getStandardType();
			    	String typeNameString_<%=cid%> = (typeName_<%=cid%> != null) ? typeName_<%=cid%>.name() : field_<%=cid%>.getType().name();
			    	if (field_<%=cid%>.getMode() == com.google.cloud.bigquery.Field.Mode.REPEATED) { // list of values.
                		typeNameString_<%=cid%> = "ARRAY";
					}

			    	dynamicMetadata_<%=cid%>.setType(routines.system.Dynamic.getTalendTypeFromDBType("bigquery_id", typeNameString_<%=cid%>, 0, 0));
			    	dynamicMetadata_<%=cid%>.setDbType(typeNameString_<%=cid%>);
			    	dynamicMetadata_<%=cid%>.setNullable(field_<%=cid%>.getMode() == com.google.cloud.bigquery.Field.Mode.NULLABLE);
			    	dynamicMetadata_<%=cid%>.setColumnPosition(i);
			    	dcg_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
			    }
			<%

		}
		%>
		//Dynamic end
	<%
	} else {
		throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"OAUTH\" or \"TOKEN\", but it is " + authMode);
	}

	if (authMode.equals("OAUTH") || authMode.equals("TOKEN")) {
	%>
    if (insert_<%=cid%>.getStatus().getErrorResult() != null) {
        globalMap.put("<%=cid%>_ERROR_MESSAGE", insert_<%=cid%>.getStatus().getErrorResult().getMessage());
        String message_<%=cid%> = "<%=cid%> - " + insert_<%=cid%>.getStatus().getErrorResult().getMessage();
        <%
            log4jFileUtil.logErrorMessage();

        // Else job has finished successfully with the results. Start {.
        %>
    } else {
        java.util.List<com.google.api.services.bigquery.model.Job> insert_jobs_<%=cid%>;
        if (!<%=forceSingleQueryExecution%> && insert_<%=cid %>.getStatistics().getNumChildJobs() != null) {
            insert_jobs_<%=cid%> = bigQueryUtil_<%=cid%>.listChildJobs(insert_<%=cid %>.getJobReference().getJobId());
        } else {
            insert_jobs_<%=cid%> = java.util.Collections.singletonList(insert_<%=cid%>);
        }
        for (com.google.api.services.bigquery.model.Job insert_elem_<%=cid %> : insert_jobs_<%=cid%>) {
            insert_<%=cid %> = insert_elem_<%=cid %>;
            if (insert_<%=cid %>.getStatus().getErrorResult() != null) {
                globalMap.put("<%=cid%>_ERROR_MESSAGE", insert_<%=cid%>.getStatus().getErrorResult().getMessage());
                String message_<%=cid%> = "<%=cid%> - " + "Query has error Result, skipping its ResultSet." + insert_<%=cid %>.getStatus().getErrorResult();
                <%
                    log4jFileUtil.logErrorMessage();
                %>
                continue;
            }
            while (true) {
                // Fetch Results
                <% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
                credential_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
                <% } %>
                com.google.api.services.bigquery.model.TableDataList dataList_<%=cid %> = bigqueryclient_<%=cid%>.tabledata()
                        .list(PROJECT_ID_<%=cid %>, insert_<%=cid %>.getConfiguration().getQuery().getDestinationTable().getDatasetId(),
                                insert_<%=cid %>.getConfiguration().getQuery().getDestinationTable().getTableId())
                            .setPageToken(pageToken_<%=cid%>).execute();

                List<com.google.api.services.bigquery.model.TableRow> rows_<%=cid %> = dataList_<%=cid %>.getRows();
                if(rows_<%=cid %> == null) {
                    // Means there is no record.
                    rows_<%=cid %> = new java.util.ArrayList<com.google.api.services.bigquery.model.TableRow>();
                }

                for (com.google.api.services.bigquery.model.TableRow row_<%=cid %> : rows_<%=cid %>) {
                    java.util.List<com.google.api.services.bigquery.model.TableCell> field_<%=cid %> = row_<%=cid %>.getF();
                    Object value_<%=cid%> = null;
                    nb_line_<%=cid%> ++;
    <%
	} else if (authMode.equals("SERVICEACCOUNT")) {
	%>
		for (com.google.cloud.bigquery.FieldValueList field_<%=cid %> : result_<%=cid%>.iterateAll()) {
			Object value_<%=cid%>;
			nb_line_<%=cid%> ++;
	<%
	} else {
		throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"OAUTH\" or \"TOKEN\", but it is " + authMode);
	}
		%>
		int fieldsCount_<%=cid %> = field_<%=cid %>.size();
		int column_index_<%=cid%> =0;
		<%if(isDynamic){%>
			int fixedColumnCount_<%=cid%> = <%=dynamic_index-1%>;
		<%}
		List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
		if (conns != null){
			if (conns.size()>0){
				IConnection conn =conns.get(0);
				String connName = conn.getName();
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {


					if ((metadatas!=null) && (metadatas.size() > 0)) {
						IMetadataTable metadata = metadatas.get(0);
						if (metadata != null) {

							List<IMetadataColumn> columns = metadata.getListColumns();
							int nbColumns = columns.size();
							for (int i = 0; i < nbColumns; i++ ) {
								IMetadataColumn column = columns.get(i);
								String columnName = column.getLabel();

								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String defVal = JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate);
								if(isDynamic && !("Dynamic").equals(typeToGenerate) && dynamic_index - 1 < i) {
								%>
									column_index_<%=cid%> = <%=i-1%> + dcg_<%=cid%>.getColumnCount();
								<%}else{%>
									column_index_<%=cid%> = <%=i%>;
								<%
								}
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								if(("Dynamic").equals(typeToGenerate)) {
									%>
									    <%=connName%>.<%=columnName%> = dcg_<%=cid%>;
										helper_<%=cid%>.readColumnsFromBigQuery(<%=connName%>.<%=columnName%>, field_<%=cid %>, fixedColumnCount_<%=cid%>, true);
									<%
								} else {
								%>
								if(fieldsCount_<%=cid %> <= column_index_<%=cid%>) {
									<%=connName%>.<%=column.getLabel()%> = <%=defVal%>;
								} else {
								<%
								if (authMode.equals("OAUTH") || authMode.equals("TOKEN")) {
								%>
								value_<%=cid%> = field_<%=cid %>.get(column_index_<%=cid%>).getV();
								<%
								} else if (authMode.equals("SERVICEACCOUNT")) {
								%>
								value_<%=cid%> = field_<%=cid %>.get(column_index_<%=cid%>).getValue();
								<%
								} else {
									throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"OAUTH\" or \"TOKEN\", but it is " + authMode);
								}
								%>
								if(com.google.api.client.util.Data.isNull(value_<%=cid%>)) value_<%=cid%> = null;

								if(value_<%=cid%> != null){

									<%
									if (javaType == JavaTypesManager.STRING) {
									%>
										<%=connName%>.<%=columnName%> = value_<%=cid%>.toString();
									<%
									} else if (javaType == JavaTypesManager.OBJECT) {
									%>
										<%=connName%>.<%=columnName%> = value_<%=cid%>;
									<%
									} else if(javaType == JavaTypesManager.DATE) {
									%>

										if (value_<%=cid%>.toString().contains("-")) {
											String sValue_<%=cid%> = value_<%=cid%>.toString();
											if (sValue_<%=cid%>.matches(".*\\.\\d{6}")) {
												// microseconds must be ignored
												sValue_<%=cid%> = sValue_<%=cid%>.substring(0, sValue_<%=cid%>.length() - 3);
											}
											<%=connName%>.<%=columnName%> = ParserUtils.parseTo_Date(sValue_<%=cid%>,<%=patternValue%>);
										} else {
											<%=connName%>.<%=columnName%> = ParserUtils.parseTo_Date(value_<%=cid%>.toString());
										}

									<%
									} else if(advancedSeparator && JavaTypesManager.isNumberType(javaType)) {
									%>
										<%=connName%>.<%=columnName%> = ParserUtils.parseTo_<%= typeToGenerate %>(ParserUtils.parseTo_Number(value_<%=cid%>.toString(), <%= thousandsSeparator %>, <%= decimalSeparator %>));
									<%
									} else if(javaType == JavaTypesManager.BYTE_ARRAY) {
									%>
										<%=connName%>.<%=columnName%> = value_<%=cid%>.toString().getBytes(<%=encoding %>);
									<%
									} else {
									%>
										<%=connName%>.<%=columnName%> = ParserUtils.parseTo_<%= typeToGenerate %>(value_<%=cid%>.toString());
									<%
									}
									%>
								}else{
									<%=connName%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate, column.getDefault())%>;
								}
								}
							<%
								}
							}
							log4jFileUtil.debugRetriveData(node);
						}
					}
				}
			}
		}
		%>
