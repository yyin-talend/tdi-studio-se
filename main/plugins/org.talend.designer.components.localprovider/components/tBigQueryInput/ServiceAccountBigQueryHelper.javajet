<%@ jet
%>
class ServiceAccountBigQueryUtil_<%=cid%> {
	private com.google.cloud.bigquery.BigQuery bigQuery;
	private boolean useLargeResult;
	private String tempTable;

	public ServiceAccountBigQueryUtil_<%=cid%>() {
		this.useLargeResult = <%="LARGE".equals(resultSizeType)%>;
	}

	private com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {
		if (bigQuery != null) {
			return bigQuery;
		}
		com.google.auth.oauth2.GoogleCredentials credentials;
		java.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);
		try(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {
			credentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);
		}

        com.google.cloud.bigquery.BigQueryOptions.Builder bigQueryOptionsBuilder = com.google.cloud.bigquery.BigQueryOptions.newBuilder()
            .setCredentials(credentials)
            .setProjectId(<%=projectId%>);
        <% 
        if( "true".equals(ElementParameterParser.getValue(node, "__USE_REGION_ENDPOINT__")) ){ 
        %>
            bigQueryOptionsBuilder.setHost( <%= ElementParameterParser.getValue(node, "__REGION_ENDPOINT_BQ__")%> );
        <%  
        } 
        %>
		return bigQueryOptionsBuilder_<%=cid%>.build().getService();
	}

	private com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {
        globalMap.put("<%=cid%>_JOBID", jobId.getJob());
        com.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());

		<%if(isLog4jEnabled) {%>
			log.info("<%=cid%> - Sending job " + jobId + " with query: " + <%=query%>);
		<%}%>
		job = job.waitFor();

		if (job == null) {
            String message = "<%=cid%> - Job no longer exists";
            globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
            throw new RuntimeException(message);
		} else if (job.getStatus().getError() != null) {
            com.google.gson.Gson gsonObject = new com.google.gson.Gson();
            globalMap.put("<%=cid%>_STATISTICS", gsonObject.toJson(job.getStatistics()));
            String message = job.getStatus().getError().toString();
            globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
            throw new RuntimeException(message);
		}

		<%if(isLog4jEnabled) {%>
			log.info("<%=cid%> - Job " + jobId + " finished successfully.");
		<%}%>

		return job;
	}

	private com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {
		bigQuery = buildBigQuery();
		com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)
			.setUseLegacySql(useLegacySql)
			.build();
		com.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of(<%=projectId%>, java.util.UUID.randomUUID().toString());
		return buildJob(bigQuery, queryConfiguration, jobId);
	}

	private com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {
		bigQuery = buildBigQuery();

		<%if (isCustomTemporaryName) {%>
			String tempDataset = <%=tempDataset%>;
			<%if(isLog4jEnabled) {%>
				log.info("<%=cid%> - temporary Dataset name : " + tempDataset);
			<%}
		} else {%>
			com.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)
				.setUseLegacySql(useLegacySql)
				.setDryRun(true)
				.build();
			com.google.cloud.bigquery.Job jobDryRun = bigQuery.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun));

			String queryLocation =jobDryRun.getJobId().getLocation();
			String location = queryLocation == null ? "US" : queryLocation;
			String tempDataset = java.util.UUID.randomUUID().toString().replaceAll("-", "")
			+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())
			+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());

			<%if (isLog4jEnabled) {%>
				log.info("<%=cid%> - query location :" + queryLocation);
				log.info("<%=cid%> - temporary dataset location :" + location);
				log.info("<%=cid%> - temporary Dataset name : " + tempDataset);
			<%}%>

			com.google.cloud.bigquery.DatasetInfo datasetInfo = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset).setLocation(location).build();
			com.google.cloud.bigquery.Dataset dataset = bigQuery.create(datasetInfo);
		<%}%>
		tempTable = java.util.UUID.randomUUID().toString().replaceAll("-", "")
			+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())
			+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());
		<%if(isLog4jEnabled) {%>
			log.info("<%=cid%> - temporary table name : " + tempTable);
		<%}%>
		com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)
			.setUseLegacySql(useLegacySql)
			.setDryRun(false)
			.setAllowLargeResults(true)
			.setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset, tempTable))
			.build();

		com.google.cloud.bigquery.JobId jobId  = com.google.cloud.bigquery.JobId
			.newBuilder().setProject(<%=projectId%>)
			.setJob(java.util.UUID.randomUUID().toString())
			.build();

		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - job location : " + jobId.getLocation());
		<%}%>
		return buildJob(bigQuery, queryConfiguration, jobId);
	}

	public com.google.cloud.bigquery.Job executeQuery(String query, boolean useLegacySql) throws Exception {

		com.google.cloud.bigquery.Job job;

		<%if ("SMALL".equals(resultSizeType)) {%>
			job = executeQuerySmallResult(query, useLegacySql);
		<%}%>
		<%if ("LARGE".equals(resultSizeType)) {%>
			job = executeQueryLargeResult(query, useLegacySql);
		<%}%>
		<%if ("AUTO".equals(resultSizeType)) {%>
			try {
				job = executeQuerySmallResult(query, useLegacySql);
			} catch (com.google.cloud.bigquery.BigQueryException e) {
				job = executeQueryLargeResult(query, useLegacySql);
				useLargeResult = true;
			}
		<%}%>

		return job;
	}

    public java.util.List<com.google.cloud.bigquery.Job> getChildJobs(String jobId) throws java.io.IOException {
        return java.util.Optional.ofNullable(buildBigQuery().listJobs(com.google.cloud.bigquery.BigQuery.JobListOption.parentJobId(jobId)))
                    .map(com.google.api.gax.paging.Page::getValues)
                    .flatMap(iterable ->
                            java.util.Optional.ofNullable(java.util.stream.StreamSupport
                                .stream(iterable.spliterator(), false)
                                .collect(java.util.stream.Collectors.toList())))
                    .orElse(java.util.Collections.emptyList());
    }

	public void cleanup() throws Exception {
		if(useLargeResult) {
			<%if (isCustomTemporaryName) {%>
				bigQuery.delete(com.google.cloud.bigquery.TableId.of(<%=tempDataset%>, tempTable));
			<%} else {%>
				com.google.cloud.bigquery.DatasetId datasetId = com.google.cloud.bigquery.DatasetId.of(<%=projectId%>, <%=tempDataset%>);
				bigQuery.delete(datasetId, com.google.cloud.bigquery.BigQuery.DatasetDeleteOption.deleteContents());
			<%}%>
		}
	}

}
