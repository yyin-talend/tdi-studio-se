<%@ jet
	    imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		java.util.List
	    "
%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();

	String authMode = ElementParameterParser.getValue(node,"__AUTH_MODE__");
	String credentialsFile = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_CREDENTIALS_FILE__");
	String clientId = ElementParameterParser.getValue(node,"__CLIENT_ID__");
	String clientSecret = ElementParameterParser.getValue(node,"__CLIENT_SECRET__");
	String projectId = ElementParameterParser.getValue(node,"__PROJECT_ID__");
	String authorizationCode = ElementParameterParser.getValue(node,"__AUTHORIZATION_CODE__");
	String dataset = ElementParameterParser.getValue(node, "__DATASET__");
	String table = ElementParameterParser.getValue(node, "__TABLE__");
	String gsFile = ElementParameterParser.getValue(node, "__GS_FILE__");
	boolean setFieldDelimiter = ElementParameterParser.getBooleanValue(node, "__SET_FIELD_DELIMITER__");
	String fieldDelimiter = ElementParameterParser.getValue(node, "__FIELD_DELIMITER__");
	String actionOnData = ElementParameterParser.getValue(node, "__ACTION_ON_DATA__");
	boolean dieOnError = ElementParameterParser.getBooleanValue(node, "__DIE_ON_ERROR__");
	boolean createTableIfNotExist = ElementParameterParser.getBooleanValue(node, "__CREATE_TABLE_IF_NOT_EXIST__");
	String gsFileHeader = ElementParameterParser.getValue(node, "__GS_FILE_HEADER__");
    String tokenFile = ElementParameterParser.getValue(node,"__TOKEN_NAME__");
	boolean isLog4jEnabled = ElementParameterParser.getBooleanValue(node.getProcess(), "__LOG4J_ACTIVATE__");
	boolean dropTable = ElementParameterParser.getBooleanValue(node, "__DROP__");
	boolean useCustomNullMarker = ElementParameterParser.getBooleanValue(node, "__USE_CUSTOM_NULL_MARKER__");
	String nullMarker = useCustomNullMarker ? ElementParameterParser.getValue(node, "__CUSTOM_NULL_MARKER__") : "\"\\\\N\"";
	String passwordFieldName = "";

	IConnection incomingConnection = null;
	if(node.getUniqueName().startsWith("tBigQueryOutput_")) {
        cid = cid.replace("_tBQBE", "");
		List< ? extends IConnection> conns = node.getIncomingConnections();
		IConnection virtConnection = null;
		if(conns!=null && conns.size()>0){
			virtConnection = node.getIncomingConnections().get(0);
		}
		if(virtConnection != null && virtConnection.getSource() != null && virtConnection.getSource().getIncomingConnections() != null && virtConnection.getSource().getIncomingConnections().size() > 0) {
			incomingConnection = virtConnection.getSource().getIncomingConnections().get(0);
		}
	}

    if (authMode.equals("OAUTH")) {
		%>
		/* ----START-CREATING-CLIENT (OAuth 2.0)---- */

		final String CLIENT_ID_<%=cid %> = <%=clientId %>;
	    <%
	    passwordFieldName = "__CLIENT_SECRET__";
	    %>

	    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		final String CLIENT_SECRET_<%=cid%> = "{\"web\": {\"client_id\": \""+<%=clientId%>+"\",\"client_secret\": \"" +decryptedPassword_<%=cid%>+ "\",\"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\"token_uri\": \"https://accounts.google.com/o/oauth2/token\"}}";
		final String PROJECT_ID_<%=cid %> = <%=projectId %>;

		// Static variables for API scope, callback URI, and HTTP/JSON functions
		final List<String> SCOPES_<%=cid%> = java.util.Arrays.asList("https://www.googleapis.com/auth/bigquery");
		final String REDIRECT_URI_<%=cid%> = "urn:ietf:wg:oauth:2.0:oob";
		final com.google.api.client.http.HttpTransport TRANSPORT_<%=cid %> = new com.google.api.client.http.javanet.NetHttpTransport();
		final com.google.api.client.json.JsonFactory JSON_FACTORY_<%=cid %> = new com.google.api.client.json.jackson2.JacksonFactory();

		com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets clientSecrets_<%=cid%> = com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets.load(
						new com.google.api.client.json.jackson2.JacksonFactory(), new java.io.InputStreamReader(new java.io.ByteArrayInputStream(
								CLIENT_SECRET_<%=cid%>.getBytes())));

		com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow flow_<%=cid%> = null;
		com.google.api.services.bigquery.Bigquery bigqueryclient_<%=cid%> = null;
		long nb_line_<%=cid%> = 0;
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Service Account Scopes [https://www.googleapis.com/auth/bigquery]");
			log.info("<%=cid%> - Redirect uris [urn:ietf:wg:oauth:2.0:oob]");
			log.info("<%=cid%> - Attempt to load existing refresh token");
		<%
		}
		%>
		// Attempt to load existing refresh token
		String tokenFile_<%=cid %> = <%=tokenFile%>;
		java.util.Properties properties_<%=cid%> = new java.util.Properties();
		try {
			java.io.FileInputStream inputStream_<%=cid%> = new java.io.FileInputStream(tokenFile_<%=cid %>);
			properties_<%=cid%>.load(inputStream_<%=cid%>);
			inputStream_<%=cid%>.close();
		} catch (java.io.FileNotFoundException e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
			<%
			if(isLog4jEnabled){
			%>
				log.warn("<%=cid%> - "+e_<%=cid%>.getMessage());
			<%
			}
			%>
		} catch (java.io.IOException ee_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",ee_<%=cid%>.getMessage());
			<%
			if(isLog4jEnabled){
			%>
				log.warn("<%=cid%> - "+ee_<%=cid%>.getMessage());
			<%
			}
			%>
		}
		String storedRefreshToken_<%=cid%> = (String) properties_<%=cid%>.get("refreshtoken");

		// Check to see if the an existing refresh token was loaded.
		// If so, create a credential and call refreshToken() to get a new
		// access token.
		if (storedRefreshToken_<%=cid%> != null) {
			// Request a new Access token using the refresh token.
			com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2. GoogleCredential.Builder().setTransport(TRANSPORT_<%=cid%>)
					.setJsonFactory(JSON_FACTORY_<%=cid%>).setClientSecrets(clientSecrets_<%=cid%>)
					.build().setFromTokenResponse(new com.google.api.client.auth.oauth2.TokenResponse().setRefreshToken(storedRefreshToken_<%=cid%>));

			credential_<%=cid%>.refreshToken();
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - An existing refresh token was loaded.");
			<%
			}
			%>
			bigqueryclient_<%=cid%> = new com.google.api.services.bigquery.Bigquery.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),new com.google.api.client.json.jackson2.JacksonFactory(),credential_<%=cid%>).setApplicationName("Talend").build();
		} else {
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - The refresh token does not exist.");
			<%
			}
			%>
			String authorizationCode_<%=cid%> = <%=authorizationCode%>;
			if(authorizationCode_<%=cid%> == null || "".equals(authorizationCode_<%=cid%>) || "\"\"".equals(authorizationCode_<%=cid%>)) {
				String authorizeUrl_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl(
						clientSecrets_<%=cid%>, REDIRECT_URI_<%=cid%>, SCOPES_<%=cid%>).setState("").build();
				<%
		    	if(isLog4jEnabled){
				%>
					log.warn("<%=cid%> - Paste this URL into a web browser to authorize BigQuery Access:\n"
									+ authorizeUrl_<%=cid%>);
				<%
				}
		    	%>
				System.out
						.println("Paste this URL into a web browser to authorize BigQuery Access:\n"
								+ authorizeUrl_<%=cid%>);
				throw new java.lang.Exception("Authorization Code error");
			} else {
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Exchange the auth code for an access token and refesh token.");
				<%
				}
				%>
				// Exchange the auth code for an access token and refesh token
				if (flow_<%=cid%> == null) {
					flow_<%=cid%> = new com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),
							new com.google.api.client.json.jackson2.JacksonFactory(), clientSecrets_<%=cid%>, SCOPES_<%=cid%>)
							.setAccessType("offline").setApprovalPrompt("force")
							.build();
				}
				com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse response_<%=cid%> = flow_<%=cid%>.newTokenRequest(authorizationCode_<%=cid%>).setRedirectUri(REDIRECT_URI_<%=cid%>).execute();
				com.google.api.client.auth.oauth2.Credential credential_<%=cid%> = flow_<%=cid%>.createAndStoreCredential(response_<%=cid%>, null);
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Store the refresh token for future use.");
				<%
				}
				%>
				// Store the refresh token for future use.
				java.util.Properties storeProperties_<%=cid%> = new java.util.Properties();
				storeProperties_<%=cid%>.setProperty("refreshtoken", credential_<%=cid%>.getRefreshToken());
				java.io.FileOutputStream outputStream_<%=cid%> = new java.io.FileOutputStream(tokenFile_<%=cid %>);
				storeProperties_<%=cid%>.store(outputStream_<%=cid%>,null);
				if (outputStream_<%=cid%> != null) {
				    outputStream_<%=cid%>.close();
				}

				bigqueryclient_<%=cid%> = new com.google.api.services.bigquery.Bigquery.Builder(new com.google.api.client.http.javanet.NetHttpTransport(),new com.google.api.client.json.jackson2.JacksonFactory(),credential_<%=cid%>).build();
			}
		}

		/* ----END-CREATING-CLIENT (OAuth 2.0)---- */

	<%
	} else if (authMode.equals("SERVICEACCOUNT")) {
	%>
		/* ----START-CREATING-CLIENT (Cloud API)---- */

		com.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;
		java.io.File credentialsFile_<%=cid%> = new java.io.File(<%=credentialsFile%>);
		try(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {
		    credentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);
		}
				
		com.google.cloud.bigquery.BigQueryOptions.Builder bigQueryOptionsBuilder_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder().setCredentials(credentials_<%=cid%>).setProjectId(<%=projectId%>);
		<% if( "true".equals(ElementParameterParser.getValue(node, "__USE_REGION_ENDPOINT__")) ){ %>
			bigQueryOptionsBuilder_<%=cid%>.setHost( <%= ElementParameterParser.getValue(node, "__REGION_ENDPOINT_BQ__")%> );
		<%  } %>
		com.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = bigQueryOptionsBuilder_<%=cid%>.build().getService();

		/* ----END-CREATING-CLIENT (Cloud API)---- */

		long nb_line_<%=cid%> = 0;
	<%
  } else if (authMode.equals("TOKEN")) {
    if (ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) {%>
       final String decryptedAccessToken_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, "__ACCESS_TOKEN__")%>);
  <%} else {%>
       final String decryptedAccessToken_<%=cid%> = <%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>;
  <%}%>
	/* ----START-CREATING-CLIENT (OAuth based Token)---- */
		final String PROJECT_ID_<%=cid %> = <%=projectId %>;

		com.google.api.client.auth.oauth2.Credential cred_<%=cid%> =
		new com.google.api.client.auth.oauth2.Credential(com.google.api.client.auth.oauth2.BearerToken.authorizationHeaderAccessMethod()).setFromTokenResponse(
			(new com.google.api.client.auth.oauth2.TokenResponse()).setAccessToken(decryptedAccessToken_<%=cid%>));

		com.google.api.services.bigquery.Bigquery bigqueryclient_<%=cid%> = null;
		long nb_line_<%=cid%> = 0;
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Creating client.");
		<%
		}
		%>
		bigqueryclient_<%=cid%> =
		new com.google.api.services.bigquery.Bigquery.Builder(new com.google.api.client.http.javanet.NetHttpTransport(), new com.google.api.client.json.jackson2.JacksonFactory(), cred_<%=cid%>).setApplicationName("Talend").build();
	/* ----END-CREATING-CLIENT (OAuth based Token)---- */
	<%
	} else {
		throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"OAUTH\" or \"TOKEN\", but it is " + authMode);
	}
	boolean bulkFileAlreadyExists = ElementParameterParser.getBooleanValue(node, "__BULK_FILE_ALREADY_EXIST__");
	String accessKey = ElementParameterParser.getValue(node, "__GS_ACCESS_KEY__");
	String secretKey = ElementParameterParser.getValue(node, "__GS_SECRET_KEY__");
	String localFilename = ElementParameterParser.getValue(node, "__GS_LOCAL_FILE__");
	String bucketName = ElementParameterParser.getValue(node, "__BUCKET_NAME__");
	String authType = ElementParameterParser.getValue(node, "__AUTH_TYPE__");
	boolean useServiceAccountForConnection = "GS_SERVICE_ACCOUNT".equals(authType);


	if(!bulkFileAlreadyExists) {
		if ("USER_ACCOUNT_HMAC".equals(authType)){
			%>
			/* ----START-UPLOADING-FILE WITH HMAC ACCOUNT---- */
			<%
			passwordFieldName = "__GS_SECRET_KEY__";
			%>

			<%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%>
				final String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
			<%} else {%>
				final String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
			<%}%>


			org.jets3t.service.security.GSCredentials gsCredentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>, decryptedPwd_<%=cid%>);
			<%final String GoogleTracker = org.talend.core.utils.TrackerUtil.getGoogleTracker();%>
			org.jets3t.service.impl.rest.httpclient.GoogleStorageService gsService_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(gsCredentials_<%=cid%>," <%=GoogleTracker%>",null);

			java.io.File fileData_<%=cid%> = new java.io.File(<%=localFilename%>);
			org.jets3t.service.model.GSObject fileObject_<%=cid%> = new org.jets3t.service.model.GSObject(fileData_<%=cid%>);
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Upload "+<%=localFilename%> + " to Google Service Bucket: "+<%=bucketName%>);
			<%
			}
			%>
			gsService_<%=cid%>.putObject(<%=bucketName%>, fileObject_<%=cid%>);
			/* ----END-UPLOADING-FILE---- */
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Upload Done.");
			<%
			}
		} else {
      boolean useExistingConn = false;
      String gsProjectID = projectId;
      String connection = cid;
			%>
      <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/googleStorageConnection.javajet"%>

			java.io.File file_<%=cid%> = new java.io.File(<%=localFilename%>);

			com.google.cloud.storage.BlobInfo blobInfo_<%=cid%> = com.google.cloud.storage.BlobInfo.
							newBuilder(<%=bucketName%>, file_<%=cid%>.getName()).build();
			// by default 512MB (or max file length)
			byte[] buffer_<%=cid%> = new byte[(int) java.lang.Math.min(java.nio.file.Files.size(file_<%=cid%>.toPath()), 512 * 1024 * 1024)];
			try (com.google.cloud.WriteChannel writer_<%=cid%> = storage_<%=cid%>.writer(
					blobInfo_<%=cid%>,
					com.google.cloud.storage.Storage.BlobWriteOption.crc32cMatch(),
					com.google.cloud.storage.Storage.BlobWriteOption.md5Match());
				java.io.InputStream inputStreamForUpload_<%=cid%> = java.nio.file.Files.newInputStream(file_<%=cid%>.toPath())) {
				int curFileLimit_<%=cid%>;
				while ((curFileLimit_<%=cid%> = inputStreamForUpload_<%=cid%>.read(buffer_<%=cid%>)) > 0) {
					writer_<%=cid%>.write(java.nio.ByteBuffer.wrap(buffer_<%=cid%>, 0, curFileLimit_<%=cid%>));
				}
			} catch (IOException e_<%=cid%>) {
				<%
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - Exception in component <%=cid%>:" + e_<%=cid%>.getMessage());
				<%
				}
				if (("true").equals(dieOnError)) {
				%>
					throw e_<%=cid%>;
				<%
				}
				%>
			}

			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Upload Done.");
			<%
			}
			%>
			/* ----END-UPLOADING-FILE---- */
			<%
		}
	}
	%>

	<%
	if(isLog4jEnabled){
	%>
	int currIndex_<%=cid%> = 0;
	<%
	}
    if (authMode.equals("OAUTH") || authMode.equals("TOKEN")) {
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Starting build a job.");
		<%
		}
		%>
		/* ----START-CREATING-JOB (OAuth 2.0)---- */
		com.google.api.services.bigquery.model.Job job_<%=cid%> = new com.google.api.services.bigquery.model.Job();
		job_<%=cid%>.setJobReference(new com.google.api.services.bigquery.model.JobReference().setProjectId(PROJECT_ID_<%=cid%>));

		com.google.api.services.bigquery.model.JobConfiguration config_<%=cid%> = new com.google.api.services.bigquery.model.JobConfiguration();
		com.google.api.services.bigquery.model.JobConfigurationLoad queryLoad_<%=cid%> = new com.google.api.services.bigquery.model.JobConfigurationLoad();

		<%if (dropTable) {%>
			try {
				<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
				cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
				<% } %>
				bigqueryclient_<%=cid%>.tables().delete(PROJECT_ID_<%=cid%>, <%=dataset%>, <%=table%>).execute();
			} catch (com.google.api.client.googleapis.json.GoogleJsonResponseException e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
				if (e_<%=cid%>.getDetails().getCode() != 404) {
					<%
					if(dieOnError) {
					%>
						throw e_<%=cid%>;
					<%
					} else {
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - "+ e_<%=cid%>.getDetails().getMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getDetails().getMessage());
					<%
					}
					%>
				}
			}
		<%}%>

		<%if (createTableIfNotExist) { %>

			try {
				<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
				cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
				<% } %>
				com.google.api.services.bigquery.model.Table getTable = bigqueryclient_<%=cid%>.tables().get(PROJECT_ID_<%=cid%>, <%=dataset%>, <%=table%>).execute();
				queryLoad_<%=cid%>.setCreateDisposition("CREATE_NEVER");
			} catch (com.google.api.client.googleapis.json.GoogleJsonResponseException e_<%=cid%>){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
				if (e_<%=cid%>.getDetails().getCode() == 404) {
					com.google.api.services.bigquery.model.TableSchema schema_<%=cid%> = new com.google.api.services.bigquery.model.TableSchema();
					<%
					if(isLog4jEnabled){
					%>
						log.info("<%=cid%> - Table field schema:");
					<%
					}
					%>
					java.util.List<com.google.api.services.bigquery.model.TableFieldSchema> fields_<%=cid%> = new java.util.ArrayList<com.google.api.services.bigquery.model.TableFieldSchema>();
					<%
					List<IMetadataTable> metadatas = node.getMetadataList();
					if ((metadatas!=null) && (metadatas.size() > 0)) {
						IMetadataTable metadata = metadatas.get(0);
						if (metadata != null) {
							List<IMetadataColumn> columns = metadata.getListColumns();
							int nbColumns = columns.size();
							int dynamicColumnSize = 0;
							for (int i = 0; i < nbColumns; i++ ) {
								IMetadataColumn column = columns.get(i);
								String columnName = column.getLabel();
								if(!"id_Dynamic".equals(column.getTalendType())) {
									String typeToGenerate = "string";
									if("id_Float".equals(column.getTalendType()) || "id_Double".equals(column.getTalendType())) {
										typeToGenerate = "float";
									}else if("id_Integer".equals(column.getTalendType()) || "id_Long".equals(column.getTalendType()) || "id_Short".equals(column.getTalendType())) {
										typeToGenerate = "integer";
									} else if("id_Character".equals(column.getTalendType())) {
										typeToGenerate = "string";
									} else if("id_BigDecimal".equals(column.getTalendType())) {
										typeToGenerate = "numeric";
									} else if("id_Boolean".equals(column.getTalendType())) {
										typeToGenerate = "boolean";
									} else if("id_Date".equals(column.getTalendType())) {
										String pattern = column.getPattern();
										if(pattern.length() == 12 || pattern.isEmpty() || "\"\"".equals(pattern)) {
											typeToGenerate = "date";
										}else if(pattern.length() > 12){
											typeToGenerate = "timestamp";
										}else{
											typeToGenerate = "string";
										}
									}
									String modeType = (!column.isNullable()) ? "REQUIRED" : "NULLABLE";
									%>
									com.google.api.services.bigquery.model.TableFieldSchema <%=columnName%>_<%=cid%> = new com.google.api.services.bigquery.model.TableFieldSchema();
									<%=columnName%>_<%=cid%>.setName("<%=columnName%>");
									<%=columnName%>_<%=cid%>.setType("<%=typeToGenerate%>");
									<%=columnName%>_<%=cid%>.setMode("<%=modeType%>");
									fields_<%=cid%>.add(<%=columnName%>_<%=cid%>);
									<%
									if(isLog4jEnabled){
									%>
										log.debug("<%=cid%> - Field index[" + currIndex_<%=cid%> + "] {\"name\":\"<%=columnName%>\",\"type\":\"<%=typeToGenerate%>\",\"mode\":\"<%=modeType%>\"}");
										currIndex_<%=cid%>++;
									<%
									}
								} else if(incomingConnection != null) {
								%>
									routines.system.Dynamic column_<%=cid%> = (routines.system.Dynamic)<%=incomingConnection.getName()%>.<%=column.getLabel()%>;
									for (int i = 0; i < column_<%=cid%>.getColumnCount(); i++) {
										routines.system.DynamicMetadata metadata = column_<%=cid%>.getColumnMetadata(i);
										String dataType = routines.system.MetadataTalendType.getDefaultSelectedDbType("bigquery_id", metadata.getType(), -1, -1);
										String orignalDBType = metadata.getDbType();
										java.util.List<String> outputDBTypelist = routines.system.MetadataTalendType.getTalendToDBList("bigquery_id", metadata.getType());
										if (outputDBTypelist != null && outputDBTypelist.size() > 0) {
											for (String dbType : outputDBTypelist) {
												if (orignalDBType.equalsIgnoreCase(dbType)) {
													dataType = dbType;
													break;
												}
											}
										}
										if (dataType == null || ("").equals(dataType)) {
											dataType = orignalDBType;
										} else if(dataType.equalsIgnoreCase("RECORD") || dataType.equalsIgnoreCase("STRUCT")) {
											dataType = "STRING";
										}
										String modeType = (!metadata.isNullable()) ? "REQUIRED" : "NULLABLE";
										com.google.api.services.bigquery.model.TableFieldSchema <%=columnName%>_<%=cid%> = new com.google.api.services.bigquery.model.TableFieldSchema();
										<%=columnName%>_<%=cid%>.setName(metadata.getName());
										<%=columnName%>_<%=cid%>.setType(dataType);
										<%=columnName%>_<%=cid%>.setMode(modeType);
										fields_<%=cid%>.add(<%=columnName%>_<%=cid%>);
										<%
										if(isLog4jEnabled){
										%>
											log.debug("<%=cid%> - Field index[" + currIndex_<%=cid%> + "] {\"name\":\"" + metadata.getName() + "\",\"type\":\"" + dataType + "\",\"mode\":\"" + modeType + "\"}");
											currIndex_<%=cid%>++;
										<%
										}
										%>
									}
								<%
								}
							}
						}
					}
					%>
					schema_<%=cid%>.setFields(fields_<%=cid%>);
					queryLoad_<%=cid%>.setSchema(schema_<%=cid%>);
					queryLoad_<%=cid%>.setCreateDisposition("CREATE_IF_NEEDED");
				} else {
					<%
					if(dieOnError) {
					%>
						throw e_<%=cid%>;
					<%
					} else {
						if(isLog4jEnabled){
						%>
							log.error("<%=cid%> - "+ e_<%=cid%>.getDetails().getMessage());
						<%
						}
						%>
						System.err.println(e_<%=cid%>.getDetails().getMessage());
					<%
					}
					%>
				}
			}
		<%
		} else {
		%>
			queryLoad_<%=cid%>.setCreateDisposition("CREATE_NEVER");
		<%
		}
		if(setFieldDelimiter) {
		%>
			queryLoad_<%=cid%>.setFieldDelimiter(<%=fieldDelimiter%>);
		<%
		}
		%>
		queryLoad_<%=cid%>.setAllowQuotedNewlines(true);
		queryLoad_<%=cid%>.setWriteDisposition("WRITE_<%=actionOnData%>");
		com.google.api.services.bigquery.model.TableReference destinationTable_<%=cid%> = new com.google.api.services.bigquery.model.TableReference();
		destinationTable_<%=cid%>.setProjectId(PROJECT_ID_<%=cid%>);
		destinationTable_<%=cid%>.setDatasetId(<%=dataset%>);
		destinationTable_<%=cid%>.setTableId(<%=table%>);

		queryLoad_<%=cid%>.setDestinationTable(destinationTable_<%=cid%>);
		queryLoad_<%=cid%>.setSourceUris(java.util.Arrays.asList(<%=gsFile%>));
		queryLoad_<%=cid%>.setSkipLeadingRows(<%=gsFileHeader%>);
		queryLoad_<%=cid%>.setNullMarker(<%= nullMarker %>);
		config_<%=cid%>.setLoad(queryLoad_<%=cid%>);

		job_<%=cid%>.setConfiguration(config_<%=cid%>);
    <% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
    cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
    <% } %>
		com.google.api.services.bigquery.Bigquery.Jobs.Insert insertReq_<%=cid%> = bigqueryclient_<%=cid%>.jobs().insert("", job_<%=cid%>);
		insertReq_<%=cid%>.setProjectId(PROJECT_ID_<%=cid%>);
		<%
		if(isLog4jEnabled){
		%>
			log.info("<%=cid%> - Build a job successfully.");
			log.info("<%=cid%> - Starting load the job.");
		<%
		} else {
		%>
			System.out.println("Starting load job.");
		<%
		}
		%>
		com.google.api.services.bigquery.model.Job jobExec_<%=cid%> = null;
		try {
			<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
      cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
      <% } %>
			jobExec_<%=cid%> = insertReq_<%=cid%>.execute();
		} catch (Exception ee_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",ee_<%=cid%>.getMessage());
			<%
			if(dieOnError) {
			%>
				throw ee_<%=cid%>;
			<%
			} else {
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - "+ ee_<%=cid%>.getMessage() + "\n" + ee_<%=cid%>.getCause());
				<%
				}
				%>
				System.err.println(ee_<%=cid%>.getMessage() + "\n" + ee_<%=cid%>.getCause());
			<%
			}
			%>
		}
		if (jobExec_<%=cid%>.getStatus().getState().equals("RUNNING")
				|| jobExec_<%=cid%>.getStatus().getState().equals("PENDING")) {
					<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
			cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
					<% } %>
            		com.google.api.services.bigquery.model.Job pollJob_<%=cid%> = bigqueryclient_<%=cid%>.jobs().get(PROJECT_ID_<%=cid%>,jobExec_<%=cid%>.getJobReference().getJobId()).setLocation(jobExec_<%=cid%>.getJobReference().getLocation()).execute();
			while (pollJob_<%=cid%>.getStatus().getState().equals("RUNNING") || pollJob_<%=cid%>.getStatus().getState().equals("PENDING")) {
				Thread.sleep(1000);
				<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
				cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
				<% } %>
				pollJob_<%=cid%> = bigqueryclient_<%=cid%>.jobs().get(PROJECT_ID_<%=cid%>,jobExec_<%=cid%>.getJobReference().getJobId()).setLocation(jobExec_<%=cid%>.getJobReference().getLocation()).execute();
				System.out.println(String.format(
						"Waiting on job %s ... Current status: %s", jobExec_<%=cid%>
								.getJobReference().getJobId(), pollJob_<%=cid%>
								.getStatus().getState()));
				<%
				if(isLog4jEnabled){
				%>
					log.debug("<%=cid%> - "+String.format("Waiting on job %s ... Current status: %s", jobExec_<%=cid%>.getJobReference().getJobId(), pollJob_<%=cid%>.getStatus().getState()));
				<%
				}
				%>
			}

			<% if(authMode.equals("TOKEN") && !ElementParameterParser.canEncrypt(node, "__ACCESS_TOKEN__")) { %>
      cred_<%=cid%>.setAccessToken(<%= ElementParameterParser.getValue(node, "__ACCESS_TOKEN__")%>);
      <% } %>
			com.google.api.services.bigquery.model.Job doneJob_<%=cid%> = pollJob_<%=cid%>;
            globalMap.put("<%=cid%>_JOBID",doneJob_<%=cid%>.getJobReference().getJobId());
            globalMap.put("<%=cid%>_STATISTICS", doneJob_<%=cid%>.getStatistics().toString());

			if ((doneJob_<%=cid%>.getStatus() != null) && (doneJob_<%=cid%>.getStatus().getErrors() != null)) {
				status = "failure";
				throw new Exception(doneJob_<%=cid%>.getStatus().getErrors().toString());
			}

			System.out.println("Done: " + doneJob_<%=cid%>.toString());
			com.google.api.services.bigquery.model.JobStatistics jobStatistics_<%=cid%>= doneJob_<%=cid%>.getStatistics();
			if(jobStatistics_<%=cid%>!=null && jobStatistics_<%=cid%>.getLoad() != null){
				com.google.api.services.bigquery.model.JobStatistics3 loadObject_<%=cid%> = jobStatistics_<%=cid%>.getLoad();
				if(loadObject_<%=cid%>!= null){
					nb_line_<%=cid%> = loadObject_<%=cid%>.getOutputRows();
				}
			}
			<%
			if(isLog4jEnabled){
			%>
				log.info("<%=cid%> - Load Done: " + doneJob_<%=cid%>.toString());
				log.info("<%=cid%> - " + nb_line_<%=cid%> + " records load successfully.");
			<%
			}
			%>
		} else {
			<%
			if(dieOnError) {
			%>
				throw new Exception(jobExec_<%=cid%>.toString());
			<%
			} else {
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - Error: " + jobExec_<%=cid%>.toString());
				<%
				}
				%>
				System.err.println("Error: " + jobExec_<%=cid%>.toString());
			<%
			}
			%>
		}
		/* ----END-CREATING-JOB (OAuth 2.0)---- */
	<%
	} else if (authMode.equals("SERVICEACCOUNT")) {
	%>
		/* ----START-CREATING-JOB (Cloud API)---- */
		com.google.cloud.bigquery.TableId tableId_<%=cid%> = com.google.cloud.bigquery.TableId.of(<%=projectId%>, <%=dataset%>, <%=table%>);
		com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_<%=cid%> = com.google.cloud.bigquery.LoadJobConfiguration.newBuilder(tableId_<%=cid%>, <%=gsFile%>);

		boolean dropTable_<%=cid%> = <%=dropTable%>;

		if (dropTable_<%=cid%> && bigquery_<%=cid%>.getTable(tableId_<%=cid%>) != null) {
			boolean deleted = bigquery_<%=cid%>.delete(tableId_<%=cid%>);
			if (deleted) {
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - table " + tableId_<%=cid%> + " deleted");
				<%
				}
				%>
			} else {
				throw new RuntimeException("Unable to delete table " + tableId_<%=cid%>);
			}
		}

		<%if(createTableIfNotExist){%>
			if(bigquery_<%=cid%>.getTable(tableId_<%=cid%>) == null){
				java.util.List<com.google.cloud.bigquery.Field> fields_<%=cid%> = new java.util.ArrayList<>();
				<%
				List<IMetadataTable> metadatas = node.getMetadataList();
				if ((metadatas!=null) && (metadatas.size() > 0)) {
					IMetadataTable metadata = metadatas.get(0);
					if (metadata != null) {
						List<IMetadataColumn> columns = metadata.getListColumns();
						int nbColumns = columns.size();
						for (int i = 0; i < nbColumns; i++ ) {
							IMetadataColumn column = columns.get(i);
							String columnName = column.getLabel();
							if(!"id_Dynamic".equals(column.getTalendType())) {
								String typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.STRING";
								if("id_String".equals(column.getTalendType()) || "id_Character".equals(column.getTalendType())) {
									typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.STRING";
								} else if ("id_Float".equals(column.getTalendType()) || "id_Double".equals(column.getTalendType())) {
									typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.FLOAT";
								} else if ("id_Short".equals(column.getTalendType()) || "id_Integer".equals(column.getTalendType()) || "id_Long".equals(column.getTalendType())) {
									typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.INTEGER";
								} else if ("id_BigDecimal".equals(column.getTalendType())) {
									typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.NUMERIC";
								} else if ("id_Boolean".equals(column.getTalendType())) {
									typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN";
								} else if ("id_Date".equals(column.getTalendType())) {
									String pattern = column.getPattern();
									if(pattern.length() == 12 || pattern.isEmpty() || "\"\"".equals(pattern)) {
										typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.DATE";
									}else if(pattern.length() > 12){
										typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP";
									}else{
										typeToGenerate = "com.google.cloud.bigquery.LegacySQLTypeName.STRING";
									}
								}
								String modeType = (!column.isNullable()) ? "REQUIRED" : "NULLABLE";
							%>

							com.google.cloud.bigquery.Field field_<%=i%> = com.google.cloud.bigquery.Field.newBuilder("<%=columnName%>", <%=typeToGenerate%>)
																										  .setMode(com.google.cloud.bigquery.Field.Mode.valueOf("<%=modeType%>"))
																										  .build();
							fields_<%=cid%>.add(field_<%=i%>);
								<%
								if(isLog4jEnabled){
								%>
									log.debug("<%=cid%> - Field index[" + currIndex_<%=cid%> + "] {\"name\":\"<%=columnName%>\",\"type\":\"<%=typeToGenerate%>\"}");
									currIndex_<%=cid%>++;
								<%
								}
							} else if(incomingConnection != null) {
							%>
								routines.system.Dynamic column_<%=cid%> = (routines.system.Dynamic)<%=incomingConnection.getName()%>.<%=column.getLabel()%>;
								for (int i = 0; i < column_<%=cid%>.getColumnCount(); i++) {
									com.google.cloud.bigquery.LegacySQLTypeName typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.STRING;
									routines.system.DynamicMetadata metadata = column_<%=cid%>.getColumnMetadata(i);
									String dataType = routines.system.MetadataTalendType.getDefaultSelectedDbType("bigquery_id", metadata.getType(), -1, -1);
									String orignalDBType = metadata.getDbType();
									java.util.List<String> outputDBTypelist = routines.system.MetadataTalendType.getTalendToDBList("bigquery_id", metadata.getType());
									if (outputDBTypelist != null && outputDBTypelist.size() > 0) {
										for (String dbType : outputDBTypelist) {
											if (orignalDBType.equalsIgnoreCase(dbType)) {
												dataType = dbType;
												break;
											}
										}
									}
									if (dataType == null || ("").equals(dataType)) {
										dataType = orignalDBType;
									}
									String modeType = (!metadata.isNullable()) ? "REQUIRED" : "NULLABLE";
									switch(dataType) {
									case "BOOL":
									case "BOOLEAN":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN;
										break;
									case "INT64":
									case "INTEGER":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.INTEGER;
										break;
									case "FLOAT64":
									case "FLOAT":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.FLOAT;
										break;
									case "STRING":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.STRING;
										break;
									case "BYTES":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.BYTES;
										break;
									case "TIMESTAMP":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP;
										break;
									case "DATE":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.DATE;
										break;
									case "TIME":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.TIME;
										break;
									case "DATETIME":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.DATETIME;
										break;
									case "NUMERIC":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.NUMERIC;
										break;
									case "GEOGRAPHY":
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.valueOf("GEOGRAPHY");
										break;
									default:
										typeToGenerate = com.google.cloud.bigquery.LegacySQLTypeName.STRING;
										break;
									}
									com.google.cloud.bigquery.Field field_<%=i%> = com.google.cloud.bigquery.Field.newBuilder(metadata.getName(), typeToGenerate)
																											  .setMode(com.google.cloud.bigquery.Field.Mode.valueOf(modeType))
																											  .build();
									fields_<%=cid%>.add(field_<%=i%>);
									<%
									if(isLog4jEnabled){
									%>
										log.debug("<%=cid%> - Field index[" + currIndex_<%=cid%> + "] {\"name\":\"" + metadata.getName() + "\",\"type\":\"" + typeToGenerate + "\",\"mode\":\"" + modeType + "\"}");
										currIndex_<%=cid%>++;
									<%
									}
									%>
								}
							<%
							}
						}
					}
				}
				%>

				com.google.cloud.bigquery.Schema schema_<%=cid%> = com.google.cloud.bigquery.Schema.of(fields_<%=cid%>);
				com.google.cloud.bigquery.TableInfo tableInfo_<%=cid%> = com.google.cloud.bigquery.TableInfo.newBuilder(tableId_<%=cid%>, com.google.cloud.bigquery.StandardTableDefinition.of(schema_<%=cid%>)).build();
				com.google.cloud.bigquery.Table table_<%=cid%> = bigquery_<%=cid%>.create(tableInfo_<%=cid%>);
				loadJobBuilder_<%=cid%>.setSchema(schema_<%=cid%>);
				loadJobBuilder_<%=cid%>.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

			} else {
				loadJobBuilder_<%=cid%>.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
			}
		<%} else {%>
				loadJobBuilder_<%=cid%>.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
		<%}%>

			loadJobBuilder_<%=cid%>.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_<%=actionOnData%>);
			loadJobBuilder_<%=cid%>.setDestinationTable(tableId_<%=cid%>);
	        com.google.cloud.bigquery.CsvOptions.Builder csvOptions_<%=cid%> = com.google.cloud.bigquery.CsvOptions.newBuilder();
			csvOptions_<%=cid%>.setAllowQuotedNewLines(true);
			csvOptions_<%=cid%>.setSkipLeadingRows(<%=gsFileHeader%>);

			<%if(setFieldDelimiter) {
	        %>
	         	csvOptions_<%=cid%>.setFieldDelimiter(<%=fieldDelimiter%>);
	        <%
	        }
	        %>
			loadJobBuilder_<%=cid%>.setFormatOptions(csvOptions_<%=cid%>.build());
			loadJobBuilder_<%=cid%>.setNullMarker(<%= nullMarker %>);
			com.google.cloud.bigquery.Job job_<%=cid%> = bigquery_<%=cid%>.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_<%=cid%>.build()));
			job_<%=cid%> = job_<%=cid%>.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
                        com.google.gson.Gson gsonObject_<%=cid%> = new com.google.gson.Gson();
			if (job_<%=cid%> != null && job_<%=cid%>.getStatus().getError() == null) {
                globalMap.put("<%=cid%>_JOBID", job_<%=cid%>.getJobId().getJob());
                globalMap.put("<%=cid%>_STATISTICS", gsonObject_<%=cid%>.toJson(job_<%=cid%>.getStatistics()));
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Job execution status: " + job_<%=cid%>.getStatus());
				<%
				}
				%>
			} else {
                if (job_<%=cid%> == null) {
                    throw new RuntimeException("Job no longer exists");
                }
                globalMap.put("<%=cid%>_JOBID", job_<%=cid%>.getJobId().getJob());
                globalMap.put("<%=cid%>_STATISTICS", gsonObject_<%=cid%>.toJson(job_<%=cid%>.getStatistics()));
				List<com.google.cloud.bigquery.BigQueryError> errorList = job_<%=cid%>.getStatus().getExecutionErrors();
				throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
			}

		/* ----END-CREATING-JOB (Cloud API)---- */
	<%
	} else {
		throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"OAUTH\" or \"TOKEN\", but it is " + authMode);
	}
	%>
